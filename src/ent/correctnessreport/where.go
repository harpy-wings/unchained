// Code generated by ent, DO NOT EDIT.

package correctnessreport

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/KenshiTech/unchained/src/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldLTE(FieldID, id))
}

// SignersCount applies equality check predicate on the "signersCount" field. It's identical to SignersCountEQ.
func SignersCount(v uint64) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldEQ(FieldSignersCount, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v uint64) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldEQ(FieldTimestamp, v))
}

// Signature applies equality check predicate on the "signature" field. It's identical to SignatureEQ.
func Signature(v []byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldEQ(FieldSignature, v))
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v []byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldEQ(FieldHash, v))
}

// Topic applies equality check predicate on the "topic" field. It's identical to TopicEQ.
func Topic(v []byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldEQ(FieldTopic, v))
}

// Correct applies equality check predicate on the "correct" field. It's identical to CorrectEQ.
func Correct(v bool) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldEQ(FieldCorrect, v))
}

// SignersCountEQ applies the EQ predicate on the "signersCount" field.
func SignersCountEQ(v uint64) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldEQ(FieldSignersCount, v))
}

// SignersCountNEQ applies the NEQ predicate on the "signersCount" field.
func SignersCountNEQ(v uint64) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldNEQ(FieldSignersCount, v))
}

// SignersCountIn applies the In predicate on the "signersCount" field.
func SignersCountIn(vs ...uint64) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldIn(FieldSignersCount, vs...))
}

// SignersCountNotIn applies the NotIn predicate on the "signersCount" field.
func SignersCountNotIn(vs ...uint64) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldNotIn(FieldSignersCount, vs...))
}

// SignersCountGT applies the GT predicate on the "signersCount" field.
func SignersCountGT(v uint64) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldGT(FieldSignersCount, v))
}

// SignersCountGTE applies the GTE predicate on the "signersCount" field.
func SignersCountGTE(v uint64) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldGTE(FieldSignersCount, v))
}

// SignersCountLT applies the LT predicate on the "signersCount" field.
func SignersCountLT(v uint64) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldLT(FieldSignersCount, v))
}

// SignersCountLTE applies the LTE predicate on the "signersCount" field.
func SignersCountLTE(v uint64) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldLTE(FieldSignersCount, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v uint64) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v uint64) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...uint64) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...uint64) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v uint64) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v uint64) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v uint64) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v uint64) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldLTE(FieldTimestamp, v))
}

// SignatureEQ applies the EQ predicate on the "signature" field.
func SignatureEQ(v []byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldEQ(FieldSignature, v))
}

// SignatureNEQ applies the NEQ predicate on the "signature" field.
func SignatureNEQ(v []byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldNEQ(FieldSignature, v))
}

// SignatureIn applies the In predicate on the "signature" field.
func SignatureIn(vs ...[]byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldIn(FieldSignature, vs...))
}

// SignatureNotIn applies the NotIn predicate on the "signature" field.
func SignatureNotIn(vs ...[]byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldNotIn(FieldSignature, vs...))
}

// SignatureGT applies the GT predicate on the "signature" field.
func SignatureGT(v []byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldGT(FieldSignature, v))
}

// SignatureGTE applies the GTE predicate on the "signature" field.
func SignatureGTE(v []byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldGTE(FieldSignature, v))
}

// SignatureLT applies the LT predicate on the "signature" field.
func SignatureLT(v []byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldLT(FieldSignature, v))
}

// SignatureLTE applies the LTE predicate on the "signature" field.
func SignatureLTE(v []byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldLTE(FieldSignature, v))
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v []byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldEQ(FieldHash, v))
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v []byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldNEQ(FieldHash, v))
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...[]byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldIn(FieldHash, vs...))
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...[]byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldNotIn(FieldHash, vs...))
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v []byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldGT(FieldHash, v))
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v []byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldGTE(FieldHash, v))
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v []byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldLT(FieldHash, v))
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v []byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldLTE(FieldHash, v))
}

// TopicEQ applies the EQ predicate on the "topic" field.
func TopicEQ(v []byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldEQ(FieldTopic, v))
}

// TopicNEQ applies the NEQ predicate on the "topic" field.
func TopicNEQ(v []byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldNEQ(FieldTopic, v))
}

// TopicIn applies the In predicate on the "topic" field.
func TopicIn(vs ...[]byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldIn(FieldTopic, vs...))
}

// TopicNotIn applies the NotIn predicate on the "topic" field.
func TopicNotIn(vs ...[]byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldNotIn(FieldTopic, vs...))
}

// TopicGT applies the GT predicate on the "topic" field.
func TopicGT(v []byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldGT(FieldTopic, v))
}

// TopicGTE applies the GTE predicate on the "topic" field.
func TopicGTE(v []byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldGTE(FieldTopic, v))
}

// TopicLT applies the LT predicate on the "topic" field.
func TopicLT(v []byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldLT(FieldTopic, v))
}

// TopicLTE applies the LTE predicate on the "topic" field.
func TopicLTE(v []byte) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldLTE(FieldTopic, v))
}

// CorrectEQ applies the EQ predicate on the "correct" field.
func CorrectEQ(v bool) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldEQ(FieldCorrect, v))
}

// CorrectNEQ applies the NEQ predicate on the "correct" field.
func CorrectNEQ(v bool) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.FieldNEQ(FieldCorrect, v))
}

// HasSigners applies the HasEdge predicate on the "signers" edge.
func HasSigners() predicate.CorrectnessReport {
	return predicate.CorrectnessReport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SignersTable, SignersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSignersWith applies the HasEdge predicate on the "signers" edge with a given conditions (other predicates).
func HasSignersWith(preds ...predicate.Signer) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(func(s *sql.Selector) {
		step := newSignersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CorrectnessReport) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CorrectnessReport) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CorrectnessReport) predicate.CorrectnessReport {
	return predicate.CorrectnessReport(sql.NotPredicates(p))
}
