// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KenshiTech/unchained/src/ent/assetprice"
	"github.com/KenshiTech/unchained/src/ent/correctnessreport"
	"github.com/KenshiTech/unchained/src/ent/eventlog"
	"github.com/KenshiTech/unchained/src/ent/signer"
)

// SignerCreate is the builder for creating a Signer entity.
type SignerCreate struct {
	config
	mutation *SignerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (sc *SignerCreate) SetName(s string) *SignerCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetEvm sets the "evm" field.
func (sc *SignerCreate) SetEvm(s string) *SignerCreate {
	sc.mutation.SetEvm(s)
	return sc
}

// SetNillableEvm sets the "evm" field if the given value is not nil.
func (sc *SignerCreate) SetNillableEvm(s *string) *SignerCreate {
	if s != nil {
		sc.SetEvm(*s)
	}
	return sc
}

// SetKey sets the "key" field.
func (sc *SignerCreate) SetKey(b []byte) *SignerCreate {
	sc.mutation.SetKey(b)
	return sc
}

// SetShortkey sets the "shortkey" field.
func (sc *SignerCreate) SetShortkey(b []byte) *SignerCreate {
	sc.mutation.SetShortkey(b)
	return sc
}

// SetPoints sets the "points" field.
func (sc *SignerCreate) SetPoints(i int64) *SignerCreate {
	sc.mutation.SetPoints(i)
	return sc
}

// AddAssetPriceIDs adds the "assetPrice" edge to the AssetPrice entity by IDs.
func (sc *SignerCreate) AddAssetPriceIDs(ids ...int) *SignerCreate {
	sc.mutation.AddAssetPriceIDs(ids...)
	return sc
}

// AddAssetPrice adds the "assetPrice" edges to the AssetPrice entity.
func (sc *SignerCreate) AddAssetPrice(a ...*AssetPrice) *SignerCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sc.AddAssetPriceIDs(ids...)
}

// AddEventLogIDs adds the "eventLogs" edge to the EventLog entity by IDs.
func (sc *SignerCreate) AddEventLogIDs(ids ...int) *SignerCreate {
	sc.mutation.AddEventLogIDs(ids...)
	return sc
}

// AddEventLogs adds the "eventLogs" edges to the EventLog entity.
func (sc *SignerCreate) AddEventLogs(e ...*EventLog) *SignerCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return sc.AddEventLogIDs(ids...)
}

// AddCorrectnessReportIDs adds the "correctnessReport" edge to the CorrectnessReport entity by IDs.
func (sc *SignerCreate) AddCorrectnessReportIDs(ids ...int) *SignerCreate {
	sc.mutation.AddCorrectnessReportIDs(ids...)
	return sc
}

// AddCorrectnessReport adds the "correctnessReport" edges to the CorrectnessReport entity.
func (sc *SignerCreate) AddCorrectnessReport(c ...*CorrectnessReport) *SignerCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sc.AddCorrectnessReportIDs(ids...)
}

// Mutation returns the SignerMutation object of the builder.
func (sc *SignerCreate) Mutation() *SignerMutation {
	return sc.mutation
}

// Save creates the Signer in the database.
func (sc *SignerCreate) Save(ctx context.Context) (*Signer, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SignerCreate) SaveX(ctx context.Context) *Signer {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SignerCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SignerCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SignerCreate) check() error {
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Signer.name"`)}
	}
	if v, ok := sc.mutation.Name(); ok {
		if err := signer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Signer.name": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "Signer.key"`)}
	}
	if v, ok := sc.mutation.Key(); ok {
		if err := signer.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "Signer.key": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Shortkey(); !ok {
		return &ValidationError{Name: "shortkey", err: errors.New(`ent: missing required field "Signer.shortkey"`)}
	}
	if v, ok := sc.mutation.Shortkey(); ok {
		if err := signer.ShortkeyValidator(v); err != nil {
			return &ValidationError{Name: "shortkey", err: fmt.Errorf(`ent: validator failed for field "Signer.shortkey": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Points(); !ok {
		return &ValidationError{Name: "points", err: errors.New(`ent: missing required field "Signer.points"`)}
	}
	return nil
}

func (sc *SignerCreate) sqlSave(ctx context.Context) (*Signer, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SignerCreate) createSpec() (*Signer, *sqlgraph.CreateSpec) {
	var (
		_node = &Signer{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(signer.Table, sqlgraph.NewFieldSpec(signer.FieldID, field.TypeInt))
	)
	_spec.OnConflict = sc.conflict
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(signer.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Evm(); ok {
		_spec.SetField(signer.FieldEvm, field.TypeString, value)
		_node.Evm = &value
	}
	if value, ok := sc.mutation.Key(); ok {
		_spec.SetField(signer.FieldKey, field.TypeBytes, value)
		_node.Key = value
	}
	if value, ok := sc.mutation.Shortkey(); ok {
		_spec.SetField(signer.FieldShortkey, field.TypeBytes, value)
		_node.Shortkey = value
	}
	if value, ok := sc.mutation.Points(); ok {
		_spec.SetField(signer.FieldPoints, field.TypeInt64, value)
		_node.Points = value
	}
	if nodes := sc.mutation.AssetPriceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   signer.AssetPriceTable,
			Columns: signer.AssetPricePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetprice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.EventLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   signer.EventLogsTable,
			Columns: signer.EventLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.CorrectnessReportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   signer.CorrectnessReportTable,
			Columns: signer.CorrectnessReportPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(correctnessreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Signer.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SignerUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (sc *SignerCreate) OnConflict(opts ...sql.ConflictOption) *SignerUpsertOne {
	sc.conflict = opts
	return &SignerUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Signer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SignerCreate) OnConflictColumns(columns ...string) *SignerUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SignerUpsertOne{
		create: sc,
	}
}

type (
	// SignerUpsertOne is the builder for "upsert"-ing
	//  one Signer node.
	SignerUpsertOne struct {
		create *SignerCreate
	}

	// SignerUpsert is the "OnConflict" setter.
	SignerUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *SignerUpsert) SetName(v string) *SignerUpsert {
	u.Set(signer.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SignerUpsert) UpdateName() *SignerUpsert {
	u.SetExcluded(signer.FieldName)
	return u
}

// SetEvm sets the "evm" field.
func (u *SignerUpsert) SetEvm(v string) *SignerUpsert {
	u.Set(signer.FieldEvm, v)
	return u
}

// UpdateEvm sets the "evm" field to the value that was provided on create.
func (u *SignerUpsert) UpdateEvm() *SignerUpsert {
	u.SetExcluded(signer.FieldEvm)
	return u
}

// ClearEvm clears the value of the "evm" field.
func (u *SignerUpsert) ClearEvm() *SignerUpsert {
	u.SetNull(signer.FieldEvm)
	return u
}

// SetKey sets the "key" field.
func (u *SignerUpsert) SetKey(v []byte) *SignerUpsert {
	u.Set(signer.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *SignerUpsert) UpdateKey() *SignerUpsert {
	u.SetExcluded(signer.FieldKey)
	return u
}

// SetShortkey sets the "shortkey" field.
func (u *SignerUpsert) SetShortkey(v []byte) *SignerUpsert {
	u.Set(signer.FieldShortkey, v)
	return u
}

// UpdateShortkey sets the "shortkey" field to the value that was provided on create.
func (u *SignerUpsert) UpdateShortkey() *SignerUpsert {
	u.SetExcluded(signer.FieldShortkey)
	return u
}

// SetPoints sets the "points" field.
func (u *SignerUpsert) SetPoints(v int64) *SignerUpsert {
	u.Set(signer.FieldPoints, v)
	return u
}

// UpdatePoints sets the "points" field to the value that was provided on create.
func (u *SignerUpsert) UpdatePoints() *SignerUpsert {
	u.SetExcluded(signer.FieldPoints)
	return u
}

// AddPoints adds v to the "points" field.
func (u *SignerUpsert) AddPoints(v int64) *SignerUpsert {
	u.Add(signer.FieldPoints, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Signer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SignerUpsertOne) UpdateNewValues() *SignerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Signer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SignerUpsertOne) Ignore() *SignerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SignerUpsertOne) DoNothing() *SignerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SignerCreate.OnConflict
// documentation for more info.
func (u *SignerUpsertOne) Update(set func(*SignerUpsert)) *SignerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SignerUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *SignerUpsertOne) SetName(v string) *SignerUpsertOne {
	return u.Update(func(s *SignerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SignerUpsertOne) UpdateName() *SignerUpsertOne {
	return u.Update(func(s *SignerUpsert) {
		s.UpdateName()
	})
}

// SetEvm sets the "evm" field.
func (u *SignerUpsertOne) SetEvm(v string) *SignerUpsertOne {
	return u.Update(func(s *SignerUpsert) {
		s.SetEvm(v)
	})
}

// UpdateEvm sets the "evm" field to the value that was provided on create.
func (u *SignerUpsertOne) UpdateEvm() *SignerUpsertOne {
	return u.Update(func(s *SignerUpsert) {
		s.UpdateEvm()
	})
}

// ClearEvm clears the value of the "evm" field.
func (u *SignerUpsertOne) ClearEvm() *SignerUpsertOne {
	return u.Update(func(s *SignerUpsert) {
		s.ClearEvm()
	})
}

// SetKey sets the "key" field.
func (u *SignerUpsertOne) SetKey(v []byte) *SignerUpsertOne {
	return u.Update(func(s *SignerUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *SignerUpsertOne) UpdateKey() *SignerUpsertOne {
	return u.Update(func(s *SignerUpsert) {
		s.UpdateKey()
	})
}

// SetShortkey sets the "shortkey" field.
func (u *SignerUpsertOne) SetShortkey(v []byte) *SignerUpsertOne {
	return u.Update(func(s *SignerUpsert) {
		s.SetShortkey(v)
	})
}

// UpdateShortkey sets the "shortkey" field to the value that was provided on create.
func (u *SignerUpsertOne) UpdateShortkey() *SignerUpsertOne {
	return u.Update(func(s *SignerUpsert) {
		s.UpdateShortkey()
	})
}

// SetPoints sets the "points" field.
func (u *SignerUpsertOne) SetPoints(v int64) *SignerUpsertOne {
	return u.Update(func(s *SignerUpsert) {
		s.SetPoints(v)
	})
}

// AddPoints adds v to the "points" field.
func (u *SignerUpsertOne) AddPoints(v int64) *SignerUpsertOne {
	return u.Update(func(s *SignerUpsert) {
		s.AddPoints(v)
	})
}

// UpdatePoints sets the "points" field to the value that was provided on create.
func (u *SignerUpsertOne) UpdatePoints() *SignerUpsertOne {
	return u.Update(func(s *SignerUpsert) {
		s.UpdatePoints()
	})
}

// Exec executes the query.
func (u *SignerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SignerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SignerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SignerUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SignerUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SignerCreateBulk is the builder for creating many Signer entities in bulk.
type SignerCreateBulk struct {
	config
	err      error
	builders []*SignerCreate
	conflict []sql.ConflictOption
}

// Save creates the Signer entities in the database.
func (scb *SignerCreateBulk) Save(ctx context.Context) ([]*Signer, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Signer, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SignerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SignerCreateBulk) SaveX(ctx context.Context) []*Signer {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SignerCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SignerCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Signer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SignerUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (scb *SignerCreateBulk) OnConflict(opts ...sql.ConflictOption) *SignerUpsertBulk {
	scb.conflict = opts
	return &SignerUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Signer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SignerCreateBulk) OnConflictColumns(columns ...string) *SignerUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SignerUpsertBulk{
		create: scb,
	}
}

// SignerUpsertBulk is the builder for "upsert"-ing
// a bulk of Signer nodes.
type SignerUpsertBulk struct {
	create *SignerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Signer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SignerUpsertBulk) UpdateNewValues() *SignerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Signer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SignerUpsertBulk) Ignore() *SignerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SignerUpsertBulk) DoNothing() *SignerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SignerCreateBulk.OnConflict
// documentation for more info.
func (u *SignerUpsertBulk) Update(set func(*SignerUpsert)) *SignerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SignerUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *SignerUpsertBulk) SetName(v string) *SignerUpsertBulk {
	return u.Update(func(s *SignerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SignerUpsertBulk) UpdateName() *SignerUpsertBulk {
	return u.Update(func(s *SignerUpsert) {
		s.UpdateName()
	})
}

// SetEvm sets the "evm" field.
func (u *SignerUpsertBulk) SetEvm(v string) *SignerUpsertBulk {
	return u.Update(func(s *SignerUpsert) {
		s.SetEvm(v)
	})
}

// UpdateEvm sets the "evm" field to the value that was provided on create.
func (u *SignerUpsertBulk) UpdateEvm() *SignerUpsertBulk {
	return u.Update(func(s *SignerUpsert) {
		s.UpdateEvm()
	})
}

// ClearEvm clears the value of the "evm" field.
func (u *SignerUpsertBulk) ClearEvm() *SignerUpsertBulk {
	return u.Update(func(s *SignerUpsert) {
		s.ClearEvm()
	})
}

// SetKey sets the "key" field.
func (u *SignerUpsertBulk) SetKey(v []byte) *SignerUpsertBulk {
	return u.Update(func(s *SignerUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *SignerUpsertBulk) UpdateKey() *SignerUpsertBulk {
	return u.Update(func(s *SignerUpsert) {
		s.UpdateKey()
	})
}

// SetShortkey sets the "shortkey" field.
func (u *SignerUpsertBulk) SetShortkey(v []byte) *SignerUpsertBulk {
	return u.Update(func(s *SignerUpsert) {
		s.SetShortkey(v)
	})
}

// UpdateShortkey sets the "shortkey" field to the value that was provided on create.
func (u *SignerUpsertBulk) UpdateShortkey() *SignerUpsertBulk {
	return u.Update(func(s *SignerUpsert) {
		s.UpdateShortkey()
	})
}

// SetPoints sets the "points" field.
func (u *SignerUpsertBulk) SetPoints(v int64) *SignerUpsertBulk {
	return u.Update(func(s *SignerUpsert) {
		s.SetPoints(v)
	})
}

// AddPoints adds v to the "points" field.
func (u *SignerUpsertBulk) AddPoints(v int64) *SignerUpsertBulk {
	return u.Update(func(s *SignerUpsert) {
		s.AddPoints(v)
	})
}

// UpdatePoints sets the "points" field to the value that was provided on create.
func (u *SignerUpsertBulk) UpdatePoints() *SignerUpsertBulk {
	return u.Update(func(s *SignerUpsert) {
		s.UpdatePoints()
	})
}

// Exec executes the query.
func (u *SignerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SignerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SignerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SignerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
