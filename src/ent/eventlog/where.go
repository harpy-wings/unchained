// Code generated by ent, DO NOT EDIT.

package eventlog

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/KenshiTech/unchained/src/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EventLog {
	return predicate.EventLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EventLog {
	return predicate.EventLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EventLog {
	return predicate.EventLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EventLog {
	return predicate.EventLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EventLog {
	return predicate.EventLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EventLog {
	return predicate.EventLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EventLog {
	return predicate.EventLog(sql.FieldLTE(FieldID, id))
}

// Block applies equality check predicate on the "block" field. It's identical to BlockEQ.
func Block(v uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldBlock, v))
}

// SignersCount applies equality check predicate on the "signersCount" field. It's identical to SignersCountEQ.
func SignersCount(v uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldSignersCount, v))
}

// Signature applies equality check predicate on the "signature" field. It's identical to SignatureEQ.
func Signature(v []byte) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldSignature, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldAddress, v))
}

// Chain applies equality check predicate on the "chain" field. It's identical to ChainEQ.
func Chain(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldChain, v))
}

// Index applies equality check predicate on the "index" field. It's identical to IndexEQ.
func Index(v uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldIndex, v))
}

// Event applies equality check predicate on the "event" field. It's identical to EventEQ.
func Event(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldEvent, v))
}

// Transaction applies equality check predicate on the "transaction" field. It's identical to TransactionEQ.
func Transaction(v []byte) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldTransaction, v))
}

// BlockEQ applies the EQ predicate on the "block" field.
func BlockEQ(v uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldBlock, v))
}

// BlockNEQ applies the NEQ predicate on the "block" field.
func BlockNEQ(v uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldNEQ(FieldBlock, v))
}

// BlockIn applies the In predicate on the "block" field.
func BlockIn(vs ...uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldIn(FieldBlock, vs...))
}

// BlockNotIn applies the NotIn predicate on the "block" field.
func BlockNotIn(vs ...uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldNotIn(FieldBlock, vs...))
}

// BlockGT applies the GT predicate on the "block" field.
func BlockGT(v uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldGT(FieldBlock, v))
}

// BlockGTE applies the GTE predicate on the "block" field.
func BlockGTE(v uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldGTE(FieldBlock, v))
}

// BlockLT applies the LT predicate on the "block" field.
func BlockLT(v uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldLT(FieldBlock, v))
}

// BlockLTE applies the LTE predicate on the "block" field.
func BlockLTE(v uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldLTE(FieldBlock, v))
}

// SignersCountEQ applies the EQ predicate on the "signersCount" field.
func SignersCountEQ(v uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldSignersCount, v))
}

// SignersCountNEQ applies the NEQ predicate on the "signersCount" field.
func SignersCountNEQ(v uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldNEQ(FieldSignersCount, v))
}

// SignersCountIn applies the In predicate on the "signersCount" field.
func SignersCountIn(vs ...uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldIn(FieldSignersCount, vs...))
}

// SignersCountNotIn applies the NotIn predicate on the "signersCount" field.
func SignersCountNotIn(vs ...uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldNotIn(FieldSignersCount, vs...))
}

// SignersCountGT applies the GT predicate on the "signersCount" field.
func SignersCountGT(v uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldGT(FieldSignersCount, v))
}

// SignersCountGTE applies the GTE predicate on the "signersCount" field.
func SignersCountGTE(v uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldGTE(FieldSignersCount, v))
}

// SignersCountLT applies the LT predicate on the "signersCount" field.
func SignersCountLT(v uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldLT(FieldSignersCount, v))
}

// SignersCountLTE applies the LTE predicate on the "signersCount" field.
func SignersCountLTE(v uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldLTE(FieldSignersCount, v))
}

// SignatureEQ applies the EQ predicate on the "signature" field.
func SignatureEQ(v []byte) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldSignature, v))
}

// SignatureNEQ applies the NEQ predicate on the "signature" field.
func SignatureNEQ(v []byte) predicate.EventLog {
	return predicate.EventLog(sql.FieldNEQ(FieldSignature, v))
}

// SignatureIn applies the In predicate on the "signature" field.
func SignatureIn(vs ...[]byte) predicate.EventLog {
	return predicate.EventLog(sql.FieldIn(FieldSignature, vs...))
}

// SignatureNotIn applies the NotIn predicate on the "signature" field.
func SignatureNotIn(vs ...[]byte) predicate.EventLog {
	return predicate.EventLog(sql.FieldNotIn(FieldSignature, vs...))
}

// SignatureGT applies the GT predicate on the "signature" field.
func SignatureGT(v []byte) predicate.EventLog {
	return predicate.EventLog(sql.FieldGT(FieldSignature, v))
}

// SignatureGTE applies the GTE predicate on the "signature" field.
func SignatureGTE(v []byte) predicate.EventLog {
	return predicate.EventLog(sql.FieldGTE(FieldSignature, v))
}

// SignatureLT applies the LT predicate on the "signature" field.
func SignatureLT(v []byte) predicate.EventLog {
	return predicate.EventLog(sql.FieldLT(FieldSignature, v))
}

// SignatureLTE applies the LTE predicate on the "signature" field.
func SignatureLTE(v []byte) predicate.EventLog {
	return predicate.EventLog(sql.FieldLTE(FieldSignature, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.EventLog {
	return predicate.EventLog(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.EventLog {
	return predicate.EventLog(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldContainsFold(FieldAddress, v))
}

// ChainEQ applies the EQ predicate on the "chain" field.
func ChainEQ(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldChain, v))
}

// ChainNEQ applies the NEQ predicate on the "chain" field.
func ChainNEQ(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldNEQ(FieldChain, v))
}

// ChainIn applies the In predicate on the "chain" field.
func ChainIn(vs ...string) predicate.EventLog {
	return predicate.EventLog(sql.FieldIn(FieldChain, vs...))
}

// ChainNotIn applies the NotIn predicate on the "chain" field.
func ChainNotIn(vs ...string) predicate.EventLog {
	return predicate.EventLog(sql.FieldNotIn(FieldChain, vs...))
}

// ChainGT applies the GT predicate on the "chain" field.
func ChainGT(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldGT(FieldChain, v))
}

// ChainGTE applies the GTE predicate on the "chain" field.
func ChainGTE(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldGTE(FieldChain, v))
}

// ChainLT applies the LT predicate on the "chain" field.
func ChainLT(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldLT(FieldChain, v))
}

// ChainLTE applies the LTE predicate on the "chain" field.
func ChainLTE(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldLTE(FieldChain, v))
}

// ChainContains applies the Contains predicate on the "chain" field.
func ChainContains(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldContains(FieldChain, v))
}

// ChainHasPrefix applies the HasPrefix predicate on the "chain" field.
func ChainHasPrefix(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldHasPrefix(FieldChain, v))
}

// ChainHasSuffix applies the HasSuffix predicate on the "chain" field.
func ChainHasSuffix(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldHasSuffix(FieldChain, v))
}

// ChainEqualFold applies the EqualFold predicate on the "chain" field.
func ChainEqualFold(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldEqualFold(FieldChain, v))
}

// ChainContainsFold applies the ContainsFold predicate on the "chain" field.
func ChainContainsFold(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldContainsFold(FieldChain, v))
}

// IndexEQ applies the EQ predicate on the "index" field.
func IndexEQ(v uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldIndex, v))
}

// IndexNEQ applies the NEQ predicate on the "index" field.
func IndexNEQ(v uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldNEQ(FieldIndex, v))
}

// IndexIn applies the In predicate on the "index" field.
func IndexIn(vs ...uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldIn(FieldIndex, vs...))
}

// IndexNotIn applies the NotIn predicate on the "index" field.
func IndexNotIn(vs ...uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldNotIn(FieldIndex, vs...))
}

// IndexGT applies the GT predicate on the "index" field.
func IndexGT(v uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldGT(FieldIndex, v))
}

// IndexGTE applies the GTE predicate on the "index" field.
func IndexGTE(v uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldGTE(FieldIndex, v))
}

// IndexLT applies the LT predicate on the "index" field.
func IndexLT(v uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldLT(FieldIndex, v))
}

// IndexLTE applies the LTE predicate on the "index" field.
func IndexLTE(v uint64) predicate.EventLog {
	return predicate.EventLog(sql.FieldLTE(FieldIndex, v))
}

// EventEQ applies the EQ predicate on the "event" field.
func EventEQ(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldEvent, v))
}

// EventNEQ applies the NEQ predicate on the "event" field.
func EventNEQ(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldNEQ(FieldEvent, v))
}

// EventIn applies the In predicate on the "event" field.
func EventIn(vs ...string) predicate.EventLog {
	return predicate.EventLog(sql.FieldIn(FieldEvent, vs...))
}

// EventNotIn applies the NotIn predicate on the "event" field.
func EventNotIn(vs ...string) predicate.EventLog {
	return predicate.EventLog(sql.FieldNotIn(FieldEvent, vs...))
}

// EventGT applies the GT predicate on the "event" field.
func EventGT(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldGT(FieldEvent, v))
}

// EventGTE applies the GTE predicate on the "event" field.
func EventGTE(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldGTE(FieldEvent, v))
}

// EventLT applies the LT predicate on the "event" field.
func EventLT(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldLT(FieldEvent, v))
}

// EventLTE applies the LTE predicate on the "event" field.
func EventLTE(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldLTE(FieldEvent, v))
}

// EventContains applies the Contains predicate on the "event" field.
func EventContains(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldContains(FieldEvent, v))
}

// EventHasPrefix applies the HasPrefix predicate on the "event" field.
func EventHasPrefix(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldHasPrefix(FieldEvent, v))
}

// EventHasSuffix applies the HasSuffix predicate on the "event" field.
func EventHasSuffix(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldHasSuffix(FieldEvent, v))
}

// EventEqualFold applies the EqualFold predicate on the "event" field.
func EventEqualFold(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldEqualFold(FieldEvent, v))
}

// EventContainsFold applies the ContainsFold predicate on the "event" field.
func EventContainsFold(v string) predicate.EventLog {
	return predicate.EventLog(sql.FieldContainsFold(FieldEvent, v))
}

// TransactionEQ applies the EQ predicate on the "transaction" field.
func TransactionEQ(v []byte) predicate.EventLog {
	return predicate.EventLog(sql.FieldEQ(FieldTransaction, v))
}

// TransactionNEQ applies the NEQ predicate on the "transaction" field.
func TransactionNEQ(v []byte) predicate.EventLog {
	return predicate.EventLog(sql.FieldNEQ(FieldTransaction, v))
}

// TransactionIn applies the In predicate on the "transaction" field.
func TransactionIn(vs ...[]byte) predicate.EventLog {
	return predicate.EventLog(sql.FieldIn(FieldTransaction, vs...))
}

// TransactionNotIn applies the NotIn predicate on the "transaction" field.
func TransactionNotIn(vs ...[]byte) predicate.EventLog {
	return predicate.EventLog(sql.FieldNotIn(FieldTransaction, vs...))
}

// TransactionGT applies the GT predicate on the "transaction" field.
func TransactionGT(v []byte) predicate.EventLog {
	return predicate.EventLog(sql.FieldGT(FieldTransaction, v))
}

// TransactionGTE applies the GTE predicate on the "transaction" field.
func TransactionGTE(v []byte) predicate.EventLog {
	return predicate.EventLog(sql.FieldGTE(FieldTransaction, v))
}

// TransactionLT applies the LT predicate on the "transaction" field.
func TransactionLT(v []byte) predicate.EventLog {
	return predicate.EventLog(sql.FieldLT(FieldTransaction, v))
}

// TransactionLTE applies the LTE predicate on the "transaction" field.
func TransactionLTE(v []byte) predicate.EventLog {
	return predicate.EventLog(sql.FieldLTE(FieldTransaction, v))
}

// HasSigners applies the HasEdge predicate on the "signers" edge.
func HasSigners() predicate.EventLog {
	return predicate.EventLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SignersTable, SignersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSignersWith applies the HasEdge predicate on the "signers" edge with a given conditions (other predicates).
func HasSignersWith(preds ...predicate.Signer) predicate.EventLog {
	return predicate.EventLog(func(s *sql.Selector) {
		step := newSignersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EventLog) predicate.EventLog {
	return predicate.EventLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EventLog) predicate.EventLog {
	return predicate.EventLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EventLog) predicate.EventLog {
	return predicate.EventLog(sql.NotPredicates(p))
}
