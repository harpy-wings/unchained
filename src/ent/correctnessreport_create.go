// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KenshiTech/unchained/src/ent/correctnessreport"
	"github.com/KenshiTech/unchained/src/ent/signer"
)

// CorrectnessReportCreate is the builder for creating a CorrectnessReport entity.
type CorrectnessReportCreate struct {
	config
	mutation *CorrectnessReportMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSignersCount sets the "signersCount" field.
func (crc *CorrectnessReportCreate) SetSignersCount(u uint64) *CorrectnessReportCreate {
	crc.mutation.SetSignersCount(u)
	return crc
}

// SetTimestamp sets the "timestamp" field.
func (crc *CorrectnessReportCreate) SetTimestamp(u uint64) *CorrectnessReportCreate {
	crc.mutation.SetTimestamp(u)
	return crc
}

// SetSignature sets the "signature" field.
func (crc *CorrectnessReportCreate) SetSignature(b []byte) *CorrectnessReportCreate {
	crc.mutation.SetSignature(b)
	return crc
}

// SetHash sets the "hash" field.
func (crc *CorrectnessReportCreate) SetHash(b []byte) *CorrectnessReportCreate {
	crc.mutation.SetHash(b)
	return crc
}

// SetTopic sets the "topic" field.
func (crc *CorrectnessReportCreate) SetTopic(b []byte) *CorrectnessReportCreate {
	crc.mutation.SetTopic(b)
	return crc
}

// SetCorrect sets the "correct" field.
func (crc *CorrectnessReportCreate) SetCorrect(b bool) *CorrectnessReportCreate {
	crc.mutation.SetCorrect(b)
	return crc
}

// AddSignerIDs adds the "signers" edge to the Signer entity by IDs.
func (crc *CorrectnessReportCreate) AddSignerIDs(ids ...int) *CorrectnessReportCreate {
	crc.mutation.AddSignerIDs(ids...)
	return crc
}

// AddSigners adds the "signers" edges to the Signer entity.
func (crc *CorrectnessReportCreate) AddSigners(s ...*Signer) *CorrectnessReportCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return crc.AddSignerIDs(ids...)
}

// Mutation returns the CorrectnessReportMutation object of the builder.
func (crc *CorrectnessReportCreate) Mutation() *CorrectnessReportMutation {
	return crc.mutation
}

// Save creates the CorrectnessReport in the database.
func (crc *CorrectnessReportCreate) Save(ctx context.Context) (*CorrectnessReport, error) {
	return withHooks(ctx, crc.sqlSave, crc.mutation, crc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (crc *CorrectnessReportCreate) SaveX(ctx context.Context) *CorrectnessReport {
	v, err := crc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crc *CorrectnessReportCreate) Exec(ctx context.Context) error {
	_, err := crc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crc *CorrectnessReportCreate) ExecX(ctx context.Context) {
	if err := crc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crc *CorrectnessReportCreate) check() error {
	if _, ok := crc.mutation.SignersCount(); !ok {
		return &ValidationError{Name: "signersCount", err: errors.New(`ent: missing required field "CorrectnessReport.signersCount"`)}
	}
	if _, ok := crc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "CorrectnessReport.timestamp"`)}
	}
	if _, ok := crc.mutation.Signature(); !ok {
		return &ValidationError{Name: "signature", err: errors.New(`ent: missing required field "CorrectnessReport.signature"`)}
	}
	if v, ok := crc.mutation.Signature(); ok {
		if err := correctnessreport.SignatureValidator(v); err != nil {
			return &ValidationError{Name: "signature", err: fmt.Errorf(`ent: validator failed for field "CorrectnessReport.signature": %w`, err)}
		}
	}
	if _, ok := crc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "CorrectnessReport.hash"`)}
	}
	if v, ok := crc.mutation.Hash(); ok {
		if err := correctnessreport.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "CorrectnessReport.hash": %w`, err)}
		}
	}
	if _, ok := crc.mutation.Topic(); !ok {
		return &ValidationError{Name: "topic", err: errors.New(`ent: missing required field "CorrectnessReport.topic"`)}
	}
	if v, ok := crc.mutation.Topic(); ok {
		if err := correctnessreport.TopicValidator(v); err != nil {
			return &ValidationError{Name: "topic", err: fmt.Errorf(`ent: validator failed for field "CorrectnessReport.topic": %w`, err)}
		}
	}
	if _, ok := crc.mutation.Correct(); !ok {
		return &ValidationError{Name: "correct", err: errors.New(`ent: missing required field "CorrectnessReport.correct"`)}
	}
	if len(crc.mutation.SignersIDs()) == 0 {
		return &ValidationError{Name: "signers", err: errors.New(`ent: missing required edge "CorrectnessReport.signers"`)}
	}
	return nil
}

func (crc *CorrectnessReportCreate) sqlSave(ctx context.Context) (*CorrectnessReport, error) {
	if err := crc.check(); err != nil {
		return nil, err
	}
	_node, _spec := crc.createSpec()
	if err := sqlgraph.CreateNode(ctx, crc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	crc.mutation.id = &_node.ID
	crc.mutation.done = true
	return _node, nil
}

func (crc *CorrectnessReportCreate) createSpec() (*CorrectnessReport, *sqlgraph.CreateSpec) {
	var (
		_node = &CorrectnessReport{config: crc.config}
		_spec = sqlgraph.NewCreateSpec(correctnessreport.Table, sqlgraph.NewFieldSpec(correctnessreport.FieldID, field.TypeInt))
	)
	_spec.OnConflict = crc.conflict
	if value, ok := crc.mutation.SignersCount(); ok {
		_spec.SetField(correctnessreport.FieldSignersCount, field.TypeUint64, value)
		_node.SignersCount = value
	}
	if value, ok := crc.mutation.Timestamp(); ok {
		_spec.SetField(correctnessreport.FieldTimestamp, field.TypeUint64, value)
		_node.Timestamp = value
	}
	if value, ok := crc.mutation.Signature(); ok {
		_spec.SetField(correctnessreport.FieldSignature, field.TypeBytes, value)
		_node.Signature = value
	}
	if value, ok := crc.mutation.Hash(); ok {
		_spec.SetField(correctnessreport.FieldHash, field.TypeBytes, value)
		_node.Hash = value
	}
	if value, ok := crc.mutation.Topic(); ok {
		_spec.SetField(correctnessreport.FieldTopic, field.TypeBytes, value)
		_node.Topic = value
	}
	if value, ok := crc.mutation.Correct(); ok {
		_spec.SetField(correctnessreport.FieldCorrect, field.TypeBool, value)
		_node.Correct = value
	}
	if nodes := crc.mutation.SignersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   correctnessreport.SignersTable,
			Columns: correctnessreport.SignersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CorrectnessReport.Create().
//		SetSignersCount(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CorrectnessReportUpsert) {
//			SetSignersCount(v+v).
//		}).
//		Exec(ctx)
func (crc *CorrectnessReportCreate) OnConflict(opts ...sql.ConflictOption) *CorrectnessReportUpsertOne {
	crc.conflict = opts
	return &CorrectnessReportUpsertOne{
		create: crc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CorrectnessReport.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (crc *CorrectnessReportCreate) OnConflictColumns(columns ...string) *CorrectnessReportUpsertOne {
	crc.conflict = append(crc.conflict, sql.ConflictColumns(columns...))
	return &CorrectnessReportUpsertOne{
		create: crc,
	}
}

type (
	// CorrectnessReportUpsertOne is the builder for "upsert"-ing
	//  one CorrectnessReport node.
	CorrectnessReportUpsertOne struct {
		create *CorrectnessReportCreate
	}

	// CorrectnessReportUpsert is the "OnConflict" setter.
	CorrectnessReportUpsert struct {
		*sql.UpdateSet
	}
)

// SetSignersCount sets the "signersCount" field.
func (u *CorrectnessReportUpsert) SetSignersCount(v uint64) *CorrectnessReportUpsert {
	u.Set(correctnessreport.FieldSignersCount, v)
	return u
}

// UpdateSignersCount sets the "signersCount" field to the value that was provided on create.
func (u *CorrectnessReportUpsert) UpdateSignersCount() *CorrectnessReportUpsert {
	u.SetExcluded(correctnessreport.FieldSignersCount)
	return u
}

// AddSignersCount adds v to the "signersCount" field.
func (u *CorrectnessReportUpsert) AddSignersCount(v uint64) *CorrectnessReportUpsert {
	u.Add(correctnessreport.FieldSignersCount, v)
	return u
}

// SetTimestamp sets the "timestamp" field.
func (u *CorrectnessReportUpsert) SetTimestamp(v uint64) *CorrectnessReportUpsert {
	u.Set(correctnessreport.FieldTimestamp, v)
	return u
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *CorrectnessReportUpsert) UpdateTimestamp() *CorrectnessReportUpsert {
	u.SetExcluded(correctnessreport.FieldTimestamp)
	return u
}

// AddTimestamp adds v to the "timestamp" field.
func (u *CorrectnessReportUpsert) AddTimestamp(v uint64) *CorrectnessReportUpsert {
	u.Add(correctnessreport.FieldTimestamp, v)
	return u
}

// SetSignature sets the "signature" field.
func (u *CorrectnessReportUpsert) SetSignature(v []byte) *CorrectnessReportUpsert {
	u.Set(correctnessreport.FieldSignature, v)
	return u
}

// UpdateSignature sets the "signature" field to the value that was provided on create.
func (u *CorrectnessReportUpsert) UpdateSignature() *CorrectnessReportUpsert {
	u.SetExcluded(correctnessreport.FieldSignature)
	return u
}

// SetHash sets the "hash" field.
func (u *CorrectnessReportUpsert) SetHash(v []byte) *CorrectnessReportUpsert {
	u.Set(correctnessreport.FieldHash, v)
	return u
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *CorrectnessReportUpsert) UpdateHash() *CorrectnessReportUpsert {
	u.SetExcluded(correctnessreport.FieldHash)
	return u
}

// SetTopic sets the "topic" field.
func (u *CorrectnessReportUpsert) SetTopic(v []byte) *CorrectnessReportUpsert {
	u.Set(correctnessreport.FieldTopic, v)
	return u
}

// UpdateTopic sets the "topic" field to the value that was provided on create.
func (u *CorrectnessReportUpsert) UpdateTopic() *CorrectnessReportUpsert {
	u.SetExcluded(correctnessreport.FieldTopic)
	return u
}

// SetCorrect sets the "correct" field.
func (u *CorrectnessReportUpsert) SetCorrect(v bool) *CorrectnessReportUpsert {
	u.Set(correctnessreport.FieldCorrect, v)
	return u
}

// UpdateCorrect sets the "correct" field to the value that was provided on create.
func (u *CorrectnessReportUpsert) UpdateCorrect() *CorrectnessReportUpsert {
	u.SetExcluded(correctnessreport.FieldCorrect)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CorrectnessReport.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CorrectnessReportUpsertOne) UpdateNewValues() *CorrectnessReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CorrectnessReport.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CorrectnessReportUpsertOne) Ignore() *CorrectnessReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CorrectnessReportUpsertOne) DoNothing() *CorrectnessReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CorrectnessReportCreate.OnConflict
// documentation for more info.
func (u *CorrectnessReportUpsertOne) Update(set func(*CorrectnessReportUpsert)) *CorrectnessReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CorrectnessReportUpsert{UpdateSet: update})
	}))
	return u
}

// SetSignersCount sets the "signersCount" field.
func (u *CorrectnessReportUpsertOne) SetSignersCount(v uint64) *CorrectnessReportUpsertOne {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.SetSignersCount(v)
	})
}

// AddSignersCount adds v to the "signersCount" field.
func (u *CorrectnessReportUpsertOne) AddSignersCount(v uint64) *CorrectnessReportUpsertOne {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.AddSignersCount(v)
	})
}

// UpdateSignersCount sets the "signersCount" field to the value that was provided on create.
func (u *CorrectnessReportUpsertOne) UpdateSignersCount() *CorrectnessReportUpsertOne {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.UpdateSignersCount()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *CorrectnessReportUpsertOne) SetTimestamp(v uint64) *CorrectnessReportUpsertOne {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.SetTimestamp(v)
	})
}

// AddTimestamp adds v to the "timestamp" field.
func (u *CorrectnessReportUpsertOne) AddTimestamp(v uint64) *CorrectnessReportUpsertOne {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.AddTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *CorrectnessReportUpsertOne) UpdateTimestamp() *CorrectnessReportUpsertOne {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.UpdateTimestamp()
	})
}

// SetSignature sets the "signature" field.
func (u *CorrectnessReportUpsertOne) SetSignature(v []byte) *CorrectnessReportUpsertOne {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.SetSignature(v)
	})
}

// UpdateSignature sets the "signature" field to the value that was provided on create.
func (u *CorrectnessReportUpsertOne) UpdateSignature() *CorrectnessReportUpsertOne {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.UpdateSignature()
	})
}

// SetHash sets the "hash" field.
func (u *CorrectnessReportUpsertOne) SetHash(v []byte) *CorrectnessReportUpsertOne {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *CorrectnessReportUpsertOne) UpdateHash() *CorrectnessReportUpsertOne {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.UpdateHash()
	})
}

// SetTopic sets the "topic" field.
func (u *CorrectnessReportUpsertOne) SetTopic(v []byte) *CorrectnessReportUpsertOne {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.SetTopic(v)
	})
}

// UpdateTopic sets the "topic" field to the value that was provided on create.
func (u *CorrectnessReportUpsertOne) UpdateTopic() *CorrectnessReportUpsertOne {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.UpdateTopic()
	})
}

// SetCorrect sets the "correct" field.
func (u *CorrectnessReportUpsertOne) SetCorrect(v bool) *CorrectnessReportUpsertOne {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.SetCorrect(v)
	})
}

// UpdateCorrect sets the "correct" field to the value that was provided on create.
func (u *CorrectnessReportUpsertOne) UpdateCorrect() *CorrectnessReportUpsertOne {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.UpdateCorrect()
	})
}

// Exec executes the query.
func (u *CorrectnessReportUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CorrectnessReportCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CorrectnessReportUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CorrectnessReportUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CorrectnessReportUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CorrectnessReportCreateBulk is the builder for creating many CorrectnessReport entities in bulk.
type CorrectnessReportCreateBulk struct {
	config
	err      error
	builders []*CorrectnessReportCreate
	conflict []sql.ConflictOption
}

// Save creates the CorrectnessReport entities in the database.
func (crcb *CorrectnessReportCreateBulk) Save(ctx context.Context) ([]*CorrectnessReport, error) {
	if crcb.err != nil {
		return nil, crcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(crcb.builders))
	nodes := make([]*CorrectnessReport, len(crcb.builders))
	mutators := make([]Mutator, len(crcb.builders))
	for i := range crcb.builders {
		func(i int, root context.Context) {
			builder := crcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CorrectnessReportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, crcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = crcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, crcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, crcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (crcb *CorrectnessReportCreateBulk) SaveX(ctx context.Context) []*CorrectnessReport {
	v, err := crcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crcb *CorrectnessReportCreateBulk) Exec(ctx context.Context) error {
	_, err := crcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crcb *CorrectnessReportCreateBulk) ExecX(ctx context.Context) {
	if err := crcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CorrectnessReport.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CorrectnessReportUpsert) {
//			SetSignersCount(v+v).
//		}).
//		Exec(ctx)
func (crcb *CorrectnessReportCreateBulk) OnConflict(opts ...sql.ConflictOption) *CorrectnessReportUpsertBulk {
	crcb.conflict = opts
	return &CorrectnessReportUpsertBulk{
		create: crcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CorrectnessReport.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (crcb *CorrectnessReportCreateBulk) OnConflictColumns(columns ...string) *CorrectnessReportUpsertBulk {
	crcb.conflict = append(crcb.conflict, sql.ConflictColumns(columns...))
	return &CorrectnessReportUpsertBulk{
		create: crcb,
	}
}

// CorrectnessReportUpsertBulk is the builder for "upsert"-ing
// a bulk of CorrectnessReport nodes.
type CorrectnessReportUpsertBulk struct {
	create *CorrectnessReportCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CorrectnessReport.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CorrectnessReportUpsertBulk) UpdateNewValues() *CorrectnessReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CorrectnessReport.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CorrectnessReportUpsertBulk) Ignore() *CorrectnessReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CorrectnessReportUpsertBulk) DoNothing() *CorrectnessReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CorrectnessReportCreateBulk.OnConflict
// documentation for more info.
func (u *CorrectnessReportUpsertBulk) Update(set func(*CorrectnessReportUpsert)) *CorrectnessReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CorrectnessReportUpsert{UpdateSet: update})
	}))
	return u
}

// SetSignersCount sets the "signersCount" field.
func (u *CorrectnessReportUpsertBulk) SetSignersCount(v uint64) *CorrectnessReportUpsertBulk {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.SetSignersCount(v)
	})
}

// AddSignersCount adds v to the "signersCount" field.
func (u *CorrectnessReportUpsertBulk) AddSignersCount(v uint64) *CorrectnessReportUpsertBulk {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.AddSignersCount(v)
	})
}

// UpdateSignersCount sets the "signersCount" field to the value that was provided on create.
func (u *CorrectnessReportUpsertBulk) UpdateSignersCount() *CorrectnessReportUpsertBulk {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.UpdateSignersCount()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *CorrectnessReportUpsertBulk) SetTimestamp(v uint64) *CorrectnessReportUpsertBulk {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.SetTimestamp(v)
	})
}

// AddTimestamp adds v to the "timestamp" field.
func (u *CorrectnessReportUpsertBulk) AddTimestamp(v uint64) *CorrectnessReportUpsertBulk {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.AddTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *CorrectnessReportUpsertBulk) UpdateTimestamp() *CorrectnessReportUpsertBulk {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.UpdateTimestamp()
	})
}

// SetSignature sets the "signature" field.
func (u *CorrectnessReportUpsertBulk) SetSignature(v []byte) *CorrectnessReportUpsertBulk {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.SetSignature(v)
	})
}

// UpdateSignature sets the "signature" field to the value that was provided on create.
func (u *CorrectnessReportUpsertBulk) UpdateSignature() *CorrectnessReportUpsertBulk {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.UpdateSignature()
	})
}

// SetHash sets the "hash" field.
func (u *CorrectnessReportUpsertBulk) SetHash(v []byte) *CorrectnessReportUpsertBulk {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *CorrectnessReportUpsertBulk) UpdateHash() *CorrectnessReportUpsertBulk {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.UpdateHash()
	})
}

// SetTopic sets the "topic" field.
func (u *CorrectnessReportUpsertBulk) SetTopic(v []byte) *CorrectnessReportUpsertBulk {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.SetTopic(v)
	})
}

// UpdateTopic sets the "topic" field to the value that was provided on create.
func (u *CorrectnessReportUpsertBulk) UpdateTopic() *CorrectnessReportUpsertBulk {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.UpdateTopic()
	})
}

// SetCorrect sets the "correct" field.
func (u *CorrectnessReportUpsertBulk) SetCorrect(v bool) *CorrectnessReportUpsertBulk {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.SetCorrect(v)
	})
}

// UpdateCorrect sets the "correct" field to the value that was provided on create.
func (u *CorrectnessReportUpsertBulk) UpdateCorrect() *CorrectnessReportUpsertBulk {
	return u.Update(func(s *CorrectnessReportUpsert) {
		s.UpdateCorrect()
	})
}

// Exec executes the query.
func (u *CorrectnessReportUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CorrectnessReportCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CorrectnessReportCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CorrectnessReportUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
