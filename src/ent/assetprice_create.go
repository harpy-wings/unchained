// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KenshiTech/unchained/src/ent/assetprice"
	"github.com/KenshiTech/unchained/src/ent/helpers"
	"github.com/KenshiTech/unchained/src/ent/signer"
)

// AssetPriceCreate is the builder for creating a AssetPrice entity.
type AssetPriceCreate struct {
	config
	mutation *AssetPriceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetBlock sets the "block" field.
func (apc *AssetPriceCreate) SetBlock(u uint64) *AssetPriceCreate {
	apc.mutation.SetBlock(u)
	return apc
}

// SetSignersCount sets the "signersCount" field.
func (apc *AssetPriceCreate) SetSignersCount(u uint64) *AssetPriceCreate {
	apc.mutation.SetSignersCount(u)
	return apc
}

// SetNillableSignersCount sets the "signersCount" field if the given value is not nil.
func (apc *AssetPriceCreate) SetNillableSignersCount(u *uint64) *AssetPriceCreate {
	if u != nil {
		apc.SetSignersCount(*u)
	}
	return apc
}

// SetPrice sets the "price" field.
func (apc *AssetPriceCreate) SetPrice(hi *helpers.BigInt) *AssetPriceCreate {
	apc.mutation.SetPrice(hi)
	return apc
}

// SetSignature sets the "signature" field.
func (apc *AssetPriceCreate) SetSignature(b []byte) *AssetPriceCreate {
	apc.mutation.SetSignature(b)
	return apc
}

// SetAsset sets the "asset" field.
func (apc *AssetPriceCreate) SetAsset(s string) *AssetPriceCreate {
	apc.mutation.SetAsset(s)
	return apc
}

// SetNillableAsset sets the "asset" field if the given value is not nil.
func (apc *AssetPriceCreate) SetNillableAsset(s *string) *AssetPriceCreate {
	if s != nil {
		apc.SetAsset(*s)
	}
	return apc
}

// SetChain sets the "chain" field.
func (apc *AssetPriceCreate) SetChain(s string) *AssetPriceCreate {
	apc.mutation.SetChain(s)
	return apc
}

// SetNillableChain sets the "chain" field if the given value is not nil.
func (apc *AssetPriceCreate) SetNillableChain(s *string) *AssetPriceCreate {
	if s != nil {
		apc.SetChain(*s)
	}
	return apc
}

// SetPair sets the "pair" field.
func (apc *AssetPriceCreate) SetPair(s string) *AssetPriceCreate {
	apc.mutation.SetPair(s)
	return apc
}

// SetNillablePair sets the "pair" field if the given value is not nil.
func (apc *AssetPriceCreate) SetNillablePair(s *string) *AssetPriceCreate {
	if s != nil {
		apc.SetPair(*s)
	}
	return apc
}

// AddSignerIDs adds the "signers" edge to the Signer entity by IDs.
func (apc *AssetPriceCreate) AddSignerIDs(ids ...int) *AssetPriceCreate {
	apc.mutation.AddSignerIDs(ids...)
	return apc
}

// AddSigners adds the "signers" edges to the Signer entity.
func (apc *AssetPriceCreate) AddSigners(s ...*Signer) *AssetPriceCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return apc.AddSignerIDs(ids...)
}

// Mutation returns the AssetPriceMutation object of the builder.
func (apc *AssetPriceCreate) Mutation() *AssetPriceMutation {
	return apc.mutation
}

// Save creates the AssetPrice in the database.
func (apc *AssetPriceCreate) Save(ctx context.Context) (*AssetPrice, error) {
	return withHooks(ctx, apc.sqlSave, apc.mutation, apc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (apc *AssetPriceCreate) SaveX(ctx context.Context) *AssetPrice {
	v, err := apc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apc *AssetPriceCreate) Exec(ctx context.Context) error {
	_, err := apc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apc *AssetPriceCreate) ExecX(ctx context.Context) {
	if err := apc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apc *AssetPriceCreate) check() error {
	if _, ok := apc.mutation.Block(); !ok {
		return &ValidationError{Name: "block", err: errors.New(`ent: missing required field "AssetPrice.block"`)}
	}
	if _, ok := apc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "AssetPrice.price"`)}
	}
	if _, ok := apc.mutation.Signature(); !ok {
		return &ValidationError{Name: "signature", err: errors.New(`ent: missing required field "AssetPrice.signature"`)}
	}
	if v, ok := apc.mutation.Signature(); ok {
		if err := assetprice.SignatureValidator(v); err != nil {
			return &ValidationError{Name: "signature", err: fmt.Errorf(`ent: validator failed for field "AssetPrice.signature": %w`, err)}
		}
	}
	if len(apc.mutation.SignersIDs()) == 0 {
		return &ValidationError{Name: "signers", err: errors.New(`ent: missing required edge "AssetPrice.signers"`)}
	}
	return nil
}

func (apc *AssetPriceCreate) sqlSave(ctx context.Context) (*AssetPrice, error) {
	if err := apc.check(); err != nil {
		return nil, err
	}
	_node, _spec := apc.createSpec()
	if err := sqlgraph.CreateNode(ctx, apc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	apc.mutation.id = &_node.ID
	apc.mutation.done = true
	return _node, nil
}

func (apc *AssetPriceCreate) createSpec() (*AssetPrice, *sqlgraph.CreateSpec) {
	var (
		_node = &AssetPrice{config: apc.config}
		_spec = sqlgraph.NewCreateSpec(assetprice.Table, sqlgraph.NewFieldSpec(assetprice.FieldID, field.TypeInt))
	)
	_spec.OnConflict = apc.conflict
	if value, ok := apc.mutation.Block(); ok {
		_spec.SetField(assetprice.FieldBlock, field.TypeUint64, value)
		_node.Block = value
	}
	if value, ok := apc.mutation.SignersCount(); ok {
		_spec.SetField(assetprice.FieldSignersCount, field.TypeUint64, value)
		_node.SignersCount = &value
	}
	if value, ok := apc.mutation.Price(); ok {
		_spec.SetField(assetprice.FieldPrice, field.TypeUint, value)
		_node.Price = value
	}
	if value, ok := apc.mutation.Signature(); ok {
		_spec.SetField(assetprice.FieldSignature, field.TypeBytes, value)
		_node.Signature = value
	}
	if value, ok := apc.mutation.Asset(); ok {
		_spec.SetField(assetprice.FieldAsset, field.TypeString, value)
		_node.Asset = value
	}
	if value, ok := apc.mutation.Chain(); ok {
		_spec.SetField(assetprice.FieldChain, field.TypeString, value)
		_node.Chain = value
	}
	if value, ok := apc.mutation.Pair(); ok {
		_spec.SetField(assetprice.FieldPair, field.TypeString, value)
		_node.Pair = value
	}
	if nodes := apc.mutation.SignersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   assetprice.SignersTable,
			Columns: assetprice.SignersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetPrice.Create().
//		SetBlock(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetPriceUpsert) {
//			SetBlock(v+v).
//		}).
//		Exec(ctx)
func (apc *AssetPriceCreate) OnConflict(opts ...sql.ConflictOption) *AssetPriceUpsertOne {
	apc.conflict = opts
	return &AssetPriceUpsertOne{
		create: apc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetPrice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (apc *AssetPriceCreate) OnConflictColumns(columns ...string) *AssetPriceUpsertOne {
	apc.conflict = append(apc.conflict, sql.ConflictColumns(columns...))
	return &AssetPriceUpsertOne{
		create: apc,
	}
}

type (
	// AssetPriceUpsertOne is the builder for "upsert"-ing
	//  one AssetPrice node.
	AssetPriceUpsertOne struct {
		create *AssetPriceCreate
	}

	// AssetPriceUpsert is the "OnConflict" setter.
	AssetPriceUpsert struct {
		*sql.UpdateSet
	}
)

// SetBlock sets the "block" field.
func (u *AssetPriceUpsert) SetBlock(v uint64) *AssetPriceUpsert {
	u.Set(assetprice.FieldBlock, v)
	return u
}

// UpdateBlock sets the "block" field to the value that was provided on create.
func (u *AssetPriceUpsert) UpdateBlock() *AssetPriceUpsert {
	u.SetExcluded(assetprice.FieldBlock)
	return u
}

// AddBlock adds v to the "block" field.
func (u *AssetPriceUpsert) AddBlock(v uint64) *AssetPriceUpsert {
	u.Add(assetprice.FieldBlock, v)
	return u
}

// SetSignersCount sets the "signersCount" field.
func (u *AssetPriceUpsert) SetSignersCount(v uint64) *AssetPriceUpsert {
	u.Set(assetprice.FieldSignersCount, v)
	return u
}

// UpdateSignersCount sets the "signersCount" field to the value that was provided on create.
func (u *AssetPriceUpsert) UpdateSignersCount() *AssetPriceUpsert {
	u.SetExcluded(assetprice.FieldSignersCount)
	return u
}

// AddSignersCount adds v to the "signersCount" field.
func (u *AssetPriceUpsert) AddSignersCount(v uint64) *AssetPriceUpsert {
	u.Add(assetprice.FieldSignersCount, v)
	return u
}

// ClearSignersCount clears the value of the "signersCount" field.
func (u *AssetPriceUpsert) ClearSignersCount() *AssetPriceUpsert {
	u.SetNull(assetprice.FieldSignersCount)
	return u
}

// SetPrice sets the "price" field.
func (u *AssetPriceUpsert) SetPrice(v *helpers.BigInt) *AssetPriceUpsert {
	u.Set(assetprice.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *AssetPriceUpsert) UpdatePrice() *AssetPriceUpsert {
	u.SetExcluded(assetprice.FieldPrice)
	return u
}

// SetSignature sets the "signature" field.
func (u *AssetPriceUpsert) SetSignature(v []byte) *AssetPriceUpsert {
	u.Set(assetprice.FieldSignature, v)
	return u
}

// UpdateSignature sets the "signature" field to the value that was provided on create.
func (u *AssetPriceUpsert) UpdateSignature() *AssetPriceUpsert {
	u.SetExcluded(assetprice.FieldSignature)
	return u
}

// SetAsset sets the "asset" field.
func (u *AssetPriceUpsert) SetAsset(v string) *AssetPriceUpsert {
	u.Set(assetprice.FieldAsset, v)
	return u
}

// UpdateAsset sets the "asset" field to the value that was provided on create.
func (u *AssetPriceUpsert) UpdateAsset() *AssetPriceUpsert {
	u.SetExcluded(assetprice.FieldAsset)
	return u
}

// ClearAsset clears the value of the "asset" field.
func (u *AssetPriceUpsert) ClearAsset() *AssetPriceUpsert {
	u.SetNull(assetprice.FieldAsset)
	return u
}

// SetChain sets the "chain" field.
func (u *AssetPriceUpsert) SetChain(v string) *AssetPriceUpsert {
	u.Set(assetprice.FieldChain, v)
	return u
}

// UpdateChain sets the "chain" field to the value that was provided on create.
func (u *AssetPriceUpsert) UpdateChain() *AssetPriceUpsert {
	u.SetExcluded(assetprice.FieldChain)
	return u
}

// ClearChain clears the value of the "chain" field.
func (u *AssetPriceUpsert) ClearChain() *AssetPriceUpsert {
	u.SetNull(assetprice.FieldChain)
	return u
}

// SetPair sets the "pair" field.
func (u *AssetPriceUpsert) SetPair(v string) *AssetPriceUpsert {
	u.Set(assetprice.FieldPair, v)
	return u
}

// UpdatePair sets the "pair" field to the value that was provided on create.
func (u *AssetPriceUpsert) UpdatePair() *AssetPriceUpsert {
	u.SetExcluded(assetprice.FieldPair)
	return u
}

// ClearPair clears the value of the "pair" field.
func (u *AssetPriceUpsert) ClearPair() *AssetPriceUpsert {
	u.SetNull(assetprice.FieldPair)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AssetPrice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetPriceUpsertOne) UpdateNewValues() *AssetPriceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetPrice.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AssetPriceUpsertOne) Ignore() *AssetPriceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetPriceUpsertOne) DoNothing() *AssetPriceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetPriceCreate.OnConflict
// documentation for more info.
func (u *AssetPriceUpsertOne) Update(set func(*AssetPriceUpsert)) *AssetPriceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetPriceUpsert{UpdateSet: update})
	}))
	return u
}

// SetBlock sets the "block" field.
func (u *AssetPriceUpsertOne) SetBlock(v uint64) *AssetPriceUpsertOne {
	return u.Update(func(s *AssetPriceUpsert) {
		s.SetBlock(v)
	})
}

// AddBlock adds v to the "block" field.
func (u *AssetPriceUpsertOne) AddBlock(v uint64) *AssetPriceUpsertOne {
	return u.Update(func(s *AssetPriceUpsert) {
		s.AddBlock(v)
	})
}

// UpdateBlock sets the "block" field to the value that was provided on create.
func (u *AssetPriceUpsertOne) UpdateBlock() *AssetPriceUpsertOne {
	return u.Update(func(s *AssetPriceUpsert) {
		s.UpdateBlock()
	})
}

// SetSignersCount sets the "signersCount" field.
func (u *AssetPriceUpsertOne) SetSignersCount(v uint64) *AssetPriceUpsertOne {
	return u.Update(func(s *AssetPriceUpsert) {
		s.SetSignersCount(v)
	})
}

// AddSignersCount adds v to the "signersCount" field.
func (u *AssetPriceUpsertOne) AddSignersCount(v uint64) *AssetPriceUpsertOne {
	return u.Update(func(s *AssetPriceUpsert) {
		s.AddSignersCount(v)
	})
}

// UpdateSignersCount sets the "signersCount" field to the value that was provided on create.
func (u *AssetPriceUpsertOne) UpdateSignersCount() *AssetPriceUpsertOne {
	return u.Update(func(s *AssetPriceUpsert) {
		s.UpdateSignersCount()
	})
}

// ClearSignersCount clears the value of the "signersCount" field.
func (u *AssetPriceUpsertOne) ClearSignersCount() *AssetPriceUpsertOne {
	return u.Update(func(s *AssetPriceUpsert) {
		s.ClearSignersCount()
	})
}

// SetPrice sets the "price" field.
func (u *AssetPriceUpsertOne) SetPrice(v *helpers.BigInt) *AssetPriceUpsertOne {
	return u.Update(func(s *AssetPriceUpsert) {
		s.SetPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *AssetPriceUpsertOne) UpdatePrice() *AssetPriceUpsertOne {
	return u.Update(func(s *AssetPriceUpsert) {
		s.UpdatePrice()
	})
}

// SetSignature sets the "signature" field.
func (u *AssetPriceUpsertOne) SetSignature(v []byte) *AssetPriceUpsertOne {
	return u.Update(func(s *AssetPriceUpsert) {
		s.SetSignature(v)
	})
}

// UpdateSignature sets the "signature" field to the value that was provided on create.
func (u *AssetPriceUpsertOne) UpdateSignature() *AssetPriceUpsertOne {
	return u.Update(func(s *AssetPriceUpsert) {
		s.UpdateSignature()
	})
}

// SetAsset sets the "asset" field.
func (u *AssetPriceUpsertOne) SetAsset(v string) *AssetPriceUpsertOne {
	return u.Update(func(s *AssetPriceUpsert) {
		s.SetAsset(v)
	})
}

// UpdateAsset sets the "asset" field to the value that was provided on create.
func (u *AssetPriceUpsertOne) UpdateAsset() *AssetPriceUpsertOne {
	return u.Update(func(s *AssetPriceUpsert) {
		s.UpdateAsset()
	})
}

// ClearAsset clears the value of the "asset" field.
func (u *AssetPriceUpsertOne) ClearAsset() *AssetPriceUpsertOne {
	return u.Update(func(s *AssetPriceUpsert) {
		s.ClearAsset()
	})
}

// SetChain sets the "chain" field.
func (u *AssetPriceUpsertOne) SetChain(v string) *AssetPriceUpsertOne {
	return u.Update(func(s *AssetPriceUpsert) {
		s.SetChain(v)
	})
}

// UpdateChain sets the "chain" field to the value that was provided on create.
func (u *AssetPriceUpsertOne) UpdateChain() *AssetPriceUpsertOne {
	return u.Update(func(s *AssetPriceUpsert) {
		s.UpdateChain()
	})
}

// ClearChain clears the value of the "chain" field.
func (u *AssetPriceUpsertOne) ClearChain() *AssetPriceUpsertOne {
	return u.Update(func(s *AssetPriceUpsert) {
		s.ClearChain()
	})
}

// SetPair sets the "pair" field.
func (u *AssetPriceUpsertOne) SetPair(v string) *AssetPriceUpsertOne {
	return u.Update(func(s *AssetPriceUpsert) {
		s.SetPair(v)
	})
}

// UpdatePair sets the "pair" field to the value that was provided on create.
func (u *AssetPriceUpsertOne) UpdatePair() *AssetPriceUpsertOne {
	return u.Update(func(s *AssetPriceUpsert) {
		s.UpdatePair()
	})
}

// ClearPair clears the value of the "pair" field.
func (u *AssetPriceUpsertOne) ClearPair() *AssetPriceUpsertOne {
	return u.Update(func(s *AssetPriceUpsert) {
		s.ClearPair()
	})
}

// Exec executes the query.
func (u *AssetPriceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetPriceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetPriceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AssetPriceUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AssetPriceUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AssetPriceCreateBulk is the builder for creating many AssetPrice entities in bulk.
type AssetPriceCreateBulk struct {
	config
	err      error
	builders []*AssetPriceCreate
	conflict []sql.ConflictOption
}

// Save creates the AssetPrice entities in the database.
func (apcb *AssetPriceCreateBulk) Save(ctx context.Context) ([]*AssetPrice, error) {
	if apcb.err != nil {
		return nil, apcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(apcb.builders))
	nodes := make([]*AssetPrice, len(apcb.builders))
	mutators := make([]Mutator, len(apcb.builders))
	for i := range apcb.builders {
		func(i int, root context.Context) {
			builder := apcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetPriceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, apcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = apcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, apcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, apcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (apcb *AssetPriceCreateBulk) SaveX(ctx context.Context) []*AssetPrice {
	v, err := apcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apcb *AssetPriceCreateBulk) Exec(ctx context.Context) error {
	_, err := apcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apcb *AssetPriceCreateBulk) ExecX(ctx context.Context) {
	if err := apcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetPrice.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetPriceUpsert) {
//			SetBlock(v+v).
//		}).
//		Exec(ctx)
func (apcb *AssetPriceCreateBulk) OnConflict(opts ...sql.ConflictOption) *AssetPriceUpsertBulk {
	apcb.conflict = opts
	return &AssetPriceUpsertBulk{
		create: apcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetPrice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (apcb *AssetPriceCreateBulk) OnConflictColumns(columns ...string) *AssetPriceUpsertBulk {
	apcb.conflict = append(apcb.conflict, sql.ConflictColumns(columns...))
	return &AssetPriceUpsertBulk{
		create: apcb,
	}
}

// AssetPriceUpsertBulk is the builder for "upsert"-ing
// a bulk of AssetPrice nodes.
type AssetPriceUpsertBulk struct {
	create *AssetPriceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AssetPrice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetPriceUpsertBulk) UpdateNewValues() *AssetPriceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetPrice.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AssetPriceUpsertBulk) Ignore() *AssetPriceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetPriceUpsertBulk) DoNothing() *AssetPriceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetPriceCreateBulk.OnConflict
// documentation for more info.
func (u *AssetPriceUpsertBulk) Update(set func(*AssetPriceUpsert)) *AssetPriceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetPriceUpsert{UpdateSet: update})
	}))
	return u
}

// SetBlock sets the "block" field.
func (u *AssetPriceUpsertBulk) SetBlock(v uint64) *AssetPriceUpsertBulk {
	return u.Update(func(s *AssetPriceUpsert) {
		s.SetBlock(v)
	})
}

// AddBlock adds v to the "block" field.
func (u *AssetPriceUpsertBulk) AddBlock(v uint64) *AssetPriceUpsertBulk {
	return u.Update(func(s *AssetPriceUpsert) {
		s.AddBlock(v)
	})
}

// UpdateBlock sets the "block" field to the value that was provided on create.
func (u *AssetPriceUpsertBulk) UpdateBlock() *AssetPriceUpsertBulk {
	return u.Update(func(s *AssetPriceUpsert) {
		s.UpdateBlock()
	})
}

// SetSignersCount sets the "signersCount" field.
func (u *AssetPriceUpsertBulk) SetSignersCount(v uint64) *AssetPriceUpsertBulk {
	return u.Update(func(s *AssetPriceUpsert) {
		s.SetSignersCount(v)
	})
}

// AddSignersCount adds v to the "signersCount" field.
func (u *AssetPriceUpsertBulk) AddSignersCount(v uint64) *AssetPriceUpsertBulk {
	return u.Update(func(s *AssetPriceUpsert) {
		s.AddSignersCount(v)
	})
}

// UpdateSignersCount sets the "signersCount" field to the value that was provided on create.
func (u *AssetPriceUpsertBulk) UpdateSignersCount() *AssetPriceUpsertBulk {
	return u.Update(func(s *AssetPriceUpsert) {
		s.UpdateSignersCount()
	})
}

// ClearSignersCount clears the value of the "signersCount" field.
func (u *AssetPriceUpsertBulk) ClearSignersCount() *AssetPriceUpsertBulk {
	return u.Update(func(s *AssetPriceUpsert) {
		s.ClearSignersCount()
	})
}

// SetPrice sets the "price" field.
func (u *AssetPriceUpsertBulk) SetPrice(v *helpers.BigInt) *AssetPriceUpsertBulk {
	return u.Update(func(s *AssetPriceUpsert) {
		s.SetPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *AssetPriceUpsertBulk) UpdatePrice() *AssetPriceUpsertBulk {
	return u.Update(func(s *AssetPriceUpsert) {
		s.UpdatePrice()
	})
}

// SetSignature sets the "signature" field.
func (u *AssetPriceUpsertBulk) SetSignature(v []byte) *AssetPriceUpsertBulk {
	return u.Update(func(s *AssetPriceUpsert) {
		s.SetSignature(v)
	})
}

// UpdateSignature sets the "signature" field to the value that was provided on create.
func (u *AssetPriceUpsertBulk) UpdateSignature() *AssetPriceUpsertBulk {
	return u.Update(func(s *AssetPriceUpsert) {
		s.UpdateSignature()
	})
}

// SetAsset sets the "asset" field.
func (u *AssetPriceUpsertBulk) SetAsset(v string) *AssetPriceUpsertBulk {
	return u.Update(func(s *AssetPriceUpsert) {
		s.SetAsset(v)
	})
}

// UpdateAsset sets the "asset" field to the value that was provided on create.
func (u *AssetPriceUpsertBulk) UpdateAsset() *AssetPriceUpsertBulk {
	return u.Update(func(s *AssetPriceUpsert) {
		s.UpdateAsset()
	})
}

// ClearAsset clears the value of the "asset" field.
func (u *AssetPriceUpsertBulk) ClearAsset() *AssetPriceUpsertBulk {
	return u.Update(func(s *AssetPriceUpsert) {
		s.ClearAsset()
	})
}

// SetChain sets the "chain" field.
func (u *AssetPriceUpsertBulk) SetChain(v string) *AssetPriceUpsertBulk {
	return u.Update(func(s *AssetPriceUpsert) {
		s.SetChain(v)
	})
}

// UpdateChain sets the "chain" field to the value that was provided on create.
func (u *AssetPriceUpsertBulk) UpdateChain() *AssetPriceUpsertBulk {
	return u.Update(func(s *AssetPriceUpsert) {
		s.UpdateChain()
	})
}

// ClearChain clears the value of the "chain" field.
func (u *AssetPriceUpsertBulk) ClearChain() *AssetPriceUpsertBulk {
	return u.Update(func(s *AssetPriceUpsert) {
		s.ClearChain()
	})
}

// SetPair sets the "pair" field.
func (u *AssetPriceUpsertBulk) SetPair(v string) *AssetPriceUpsertBulk {
	return u.Update(func(s *AssetPriceUpsert) {
		s.SetPair(v)
	})
}

// UpdatePair sets the "pair" field to the value that was provided on create.
func (u *AssetPriceUpsertBulk) UpdatePair() *AssetPriceUpsertBulk {
	return u.Update(func(s *AssetPriceUpsert) {
		s.UpdatePair()
	})
}

// ClearPair clears the value of the "pair" field.
func (u *AssetPriceUpsertBulk) ClearPair() *AssetPriceUpsertBulk {
	return u.Update(func(s *AssetPriceUpsert) {
		s.ClearPair()
	})
}

// Exec executes the query.
func (u *AssetPriceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AssetPriceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetPriceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetPriceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
