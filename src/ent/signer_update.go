// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KenshiTech/unchained/src/ent/assetprice"
	"github.com/KenshiTech/unchained/src/ent/correctnessreport"
	"github.com/KenshiTech/unchained/src/ent/eventlog"
	"github.com/KenshiTech/unchained/src/ent/predicate"
	"github.com/KenshiTech/unchained/src/ent/signer"
)

// SignerUpdate is the builder for updating Signer entities.
type SignerUpdate struct {
	config
	hooks    []Hook
	mutation *SignerMutation
}

// Where appends a list predicates to the SignerUpdate builder.
func (su *SignerUpdate) Where(ps ...predicate.Signer) *SignerUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SignerUpdate) SetName(s string) *SignerUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SignerUpdate) SetNillableName(s *string) *SignerUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetEvm sets the "evm" field.
func (su *SignerUpdate) SetEvm(s string) *SignerUpdate {
	su.mutation.SetEvm(s)
	return su
}

// SetNillableEvm sets the "evm" field if the given value is not nil.
func (su *SignerUpdate) SetNillableEvm(s *string) *SignerUpdate {
	if s != nil {
		su.SetEvm(*s)
	}
	return su
}

// ClearEvm clears the value of the "evm" field.
func (su *SignerUpdate) ClearEvm() *SignerUpdate {
	su.mutation.ClearEvm()
	return su
}

// SetKey sets the "key" field.
func (su *SignerUpdate) SetKey(b []byte) *SignerUpdate {
	su.mutation.SetKey(b)
	return su
}

// SetShortkey sets the "shortkey" field.
func (su *SignerUpdate) SetShortkey(b []byte) *SignerUpdate {
	su.mutation.SetShortkey(b)
	return su
}

// SetPoints sets the "points" field.
func (su *SignerUpdate) SetPoints(i int64) *SignerUpdate {
	su.mutation.ResetPoints()
	su.mutation.SetPoints(i)
	return su
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (su *SignerUpdate) SetNillablePoints(i *int64) *SignerUpdate {
	if i != nil {
		su.SetPoints(*i)
	}
	return su
}

// AddPoints adds i to the "points" field.
func (su *SignerUpdate) AddPoints(i int64) *SignerUpdate {
	su.mutation.AddPoints(i)
	return su
}

// AddAssetPriceIDs adds the "assetPrice" edge to the AssetPrice entity by IDs.
func (su *SignerUpdate) AddAssetPriceIDs(ids ...int) *SignerUpdate {
	su.mutation.AddAssetPriceIDs(ids...)
	return su
}

// AddAssetPrice adds the "assetPrice" edges to the AssetPrice entity.
func (su *SignerUpdate) AddAssetPrice(a ...*AssetPrice) *SignerUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.AddAssetPriceIDs(ids...)
}

// AddEventLogIDs adds the "eventLogs" edge to the EventLog entity by IDs.
func (su *SignerUpdate) AddEventLogIDs(ids ...int) *SignerUpdate {
	su.mutation.AddEventLogIDs(ids...)
	return su
}

// AddEventLogs adds the "eventLogs" edges to the EventLog entity.
func (su *SignerUpdate) AddEventLogs(e ...*EventLog) *SignerUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.AddEventLogIDs(ids...)
}

// AddCorrectnessReportIDs adds the "correctnessReport" edge to the CorrectnessReport entity by IDs.
func (su *SignerUpdate) AddCorrectnessReportIDs(ids ...int) *SignerUpdate {
	su.mutation.AddCorrectnessReportIDs(ids...)
	return su
}

// AddCorrectnessReport adds the "correctnessReport" edges to the CorrectnessReport entity.
func (su *SignerUpdate) AddCorrectnessReport(c ...*CorrectnessReport) *SignerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddCorrectnessReportIDs(ids...)
}

// Mutation returns the SignerMutation object of the builder.
func (su *SignerUpdate) Mutation() *SignerMutation {
	return su.mutation
}

// ClearAssetPrice clears all "assetPrice" edges to the AssetPrice entity.
func (su *SignerUpdate) ClearAssetPrice() *SignerUpdate {
	su.mutation.ClearAssetPrice()
	return su
}

// RemoveAssetPriceIDs removes the "assetPrice" edge to AssetPrice entities by IDs.
func (su *SignerUpdate) RemoveAssetPriceIDs(ids ...int) *SignerUpdate {
	su.mutation.RemoveAssetPriceIDs(ids...)
	return su
}

// RemoveAssetPrice removes "assetPrice" edges to AssetPrice entities.
func (su *SignerUpdate) RemoveAssetPrice(a ...*AssetPrice) *SignerUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.RemoveAssetPriceIDs(ids...)
}

// ClearEventLogs clears all "eventLogs" edges to the EventLog entity.
func (su *SignerUpdate) ClearEventLogs() *SignerUpdate {
	su.mutation.ClearEventLogs()
	return su
}

// RemoveEventLogIDs removes the "eventLogs" edge to EventLog entities by IDs.
func (su *SignerUpdate) RemoveEventLogIDs(ids ...int) *SignerUpdate {
	su.mutation.RemoveEventLogIDs(ids...)
	return su
}

// RemoveEventLogs removes "eventLogs" edges to EventLog entities.
func (su *SignerUpdate) RemoveEventLogs(e ...*EventLog) *SignerUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.RemoveEventLogIDs(ids...)
}

// ClearCorrectnessReport clears all "correctnessReport" edges to the CorrectnessReport entity.
func (su *SignerUpdate) ClearCorrectnessReport() *SignerUpdate {
	su.mutation.ClearCorrectnessReport()
	return su
}

// RemoveCorrectnessReportIDs removes the "correctnessReport" edge to CorrectnessReport entities by IDs.
func (su *SignerUpdate) RemoveCorrectnessReportIDs(ids ...int) *SignerUpdate {
	su.mutation.RemoveCorrectnessReportIDs(ids...)
	return su
}

// RemoveCorrectnessReport removes "correctnessReport" edges to CorrectnessReport entities.
func (su *SignerUpdate) RemoveCorrectnessReport(c ...*CorrectnessReport) *SignerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveCorrectnessReportIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SignerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SignerUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SignerUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SignerUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SignerUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := signer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Signer.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Key(); ok {
		if err := signer.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "Signer.key": %w`, err)}
		}
	}
	if v, ok := su.mutation.Shortkey(); ok {
		if err := signer.ShortkeyValidator(v); err != nil {
			return &ValidationError{Name: "shortkey", err: fmt.Errorf(`ent: validator failed for field "Signer.shortkey": %w`, err)}
		}
	}
	return nil
}

func (su *SignerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(signer.Table, signer.Columns, sqlgraph.NewFieldSpec(signer.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(signer.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Evm(); ok {
		_spec.SetField(signer.FieldEvm, field.TypeString, value)
	}
	if su.mutation.EvmCleared() {
		_spec.ClearField(signer.FieldEvm, field.TypeString)
	}
	if value, ok := su.mutation.Key(); ok {
		_spec.SetField(signer.FieldKey, field.TypeBytes, value)
	}
	if value, ok := su.mutation.Shortkey(); ok {
		_spec.SetField(signer.FieldShortkey, field.TypeBytes, value)
	}
	if value, ok := su.mutation.Points(); ok {
		_spec.SetField(signer.FieldPoints, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedPoints(); ok {
		_spec.AddField(signer.FieldPoints, field.TypeInt64, value)
	}
	if su.mutation.AssetPriceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   signer.AssetPriceTable,
			Columns: signer.AssetPricePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetprice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedAssetPriceIDs(); len(nodes) > 0 && !su.mutation.AssetPriceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   signer.AssetPriceTable,
			Columns: signer.AssetPricePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetprice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AssetPriceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   signer.AssetPriceTable,
			Columns: signer.AssetPricePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetprice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.EventLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   signer.EventLogsTable,
			Columns: signer.EventLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedEventLogsIDs(); len(nodes) > 0 && !su.mutation.EventLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   signer.EventLogsTable,
			Columns: signer.EventLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EventLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   signer.EventLogsTable,
			Columns: signer.EventLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.CorrectnessReportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   signer.CorrectnessReportTable,
			Columns: signer.CorrectnessReportPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(correctnessreport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedCorrectnessReportIDs(); len(nodes) > 0 && !su.mutation.CorrectnessReportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   signer.CorrectnessReportTable,
			Columns: signer.CorrectnessReportPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(correctnessreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CorrectnessReportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   signer.CorrectnessReportTable,
			Columns: signer.CorrectnessReportPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(correctnessreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{signer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SignerUpdateOne is the builder for updating a single Signer entity.
type SignerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SignerMutation
}

// SetName sets the "name" field.
func (suo *SignerUpdateOne) SetName(s string) *SignerUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SignerUpdateOne) SetNillableName(s *string) *SignerUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetEvm sets the "evm" field.
func (suo *SignerUpdateOne) SetEvm(s string) *SignerUpdateOne {
	suo.mutation.SetEvm(s)
	return suo
}

// SetNillableEvm sets the "evm" field if the given value is not nil.
func (suo *SignerUpdateOne) SetNillableEvm(s *string) *SignerUpdateOne {
	if s != nil {
		suo.SetEvm(*s)
	}
	return suo
}

// ClearEvm clears the value of the "evm" field.
func (suo *SignerUpdateOne) ClearEvm() *SignerUpdateOne {
	suo.mutation.ClearEvm()
	return suo
}

// SetKey sets the "key" field.
func (suo *SignerUpdateOne) SetKey(b []byte) *SignerUpdateOne {
	suo.mutation.SetKey(b)
	return suo
}

// SetShortkey sets the "shortkey" field.
func (suo *SignerUpdateOne) SetShortkey(b []byte) *SignerUpdateOne {
	suo.mutation.SetShortkey(b)
	return suo
}

// SetPoints sets the "points" field.
func (suo *SignerUpdateOne) SetPoints(i int64) *SignerUpdateOne {
	suo.mutation.ResetPoints()
	suo.mutation.SetPoints(i)
	return suo
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (suo *SignerUpdateOne) SetNillablePoints(i *int64) *SignerUpdateOne {
	if i != nil {
		suo.SetPoints(*i)
	}
	return suo
}

// AddPoints adds i to the "points" field.
func (suo *SignerUpdateOne) AddPoints(i int64) *SignerUpdateOne {
	suo.mutation.AddPoints(i)
	return suo
}

// AddAssetPriceIDs adds the "assetPrice" edge to the AssetPrice entity by IDs.
func (suo *SignerUpdateOne) AddAssetPriceIDs(ids ...int) *SignerUpdateOne {
	suo.mutation.AddAssetPriceIDs(ids...)
	return suo
}

// AddAssetPrice adds the "assetPrice" edges to the AssetPrice entity.
func (suo *SignerUpdateOne) AddAssetPrice(a ...*AssetPrice) *SignerUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.AddAssetPriceIDs(ids...)
}

// AddEventLogIDs adds the "eventLogs" edge to the EventLog entity by IDs.
func (suo *SignerUpdateOne) AddEventLogIDs(ids ...int) *SignerUpdateOne {
	suo.mutation.AddEventLogIDs(ids...)
	return suo
}

// AddEventLogs adds the "eventLogs" edges to the EventLog entity.
func (suo *SignerUpdateOne) AddEventLogs(e ...*EventLog) *SignerUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.AddEventLogIDs(ids...)
}

// AddCorrectnessReportIDs adds the "correctnessReport" edge to the CorrectnessReport entity by IDs.
func (suo *SignerUpdateOne) AddCorrectnessReportIDs(ids ...int) *SignerUpdateOne {
	suo.mutation.AddCorrectnessReportIDs(ids...)
	return suo
}

// AddCorrectnessReport adds the "correctnessReport" edges to the CorrectnessReport entity.
func (suo *SignerUpdateOne) AddCorrectnessReport(c ...*CorrectnessReport) *SignerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddCorrectnessReportIDs(ids...)
}

// Mutation returns the SignerMutation object of the builder.
func (suo *SignerUpdateOne) Mutation() *SignerMutation {
	return suo.mutation
}

// ClearAssetPrice clears all "assetPrice" edges to the AssetPrice entity.
func (suo *SignerUpdateOne) ClearAssetPrice() *SignerUpdateOne {
	suo.mutation.ClearAssetPrice()
	return suo
}

// RemoveAssetPriceIDs removes the "assetPrice" edge to AssetPrice entities by IDs.
func (suo *SignerUpdateOne) RemoveAssetPriceIDs(ids ...int) *SignerUpdateOne {
	suo.mutation.RemoveAssetPriceIDs(ids...)
	return suo
}

// RemoveAssetPrice removes "assetPrice" edges to AssetPrice entities.
func (suo *SignerUpdateOne) RemoveAssetPrice(a ...*AssetPrice) *SignerUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.RemoveAssetPriceIDs(ids...)
}

// ClearEventLogs clears all "eventLogs" edges to the EventLog entity.
func (suo *SignerUpdateOne) ClearEventLogs() *SignerUpdateOne {
	suo.mutation.ClearEventLogs()
	return suo
}

// RemoveEventLogIDs removes the "eventLogs" edge to EventLog entities by IDs.
func (suo *SignerUpdateOne) RemoveEventLogIDs(ids ...int) *SignerUpdateOne {
	suo.mutation.RemoveEventLogIDs(ids...)
	return suo
}

// RemoveEventLogs removes "eventLogs" edges to EventLog entities.
func (suo *SignerUpdateOne) RemoveEventLogs(e ...*EventLog) *SignerUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.RemoveEventLogIDs(ids...)
}

// ClearCorrectnessReport clears all "correctnessReport" edges to the CorrectnessReport entity.
func (suo *SignerUpdateOne) ClearCorrectnessReport() *SignerUpdateOne {
	suo.mutation.ClearCorrectnessReport()
	return suo
}

// RemoveCorrectnessReportIDs removes the "correctnessReport" edge to CorrectnessReport entities by IDs.
func (suo *SignerUpdateOne) RemoveCorrectnessReportIDs(ids ...int) *SignerUpdateOne {
	suo.mutation.RemoveCorrectnessReportIDs(ids...)
	return suo
}

// RemoveCorrectnessReport removes "correctnessReport" edges to CorrectnessReport entities.
func (suo *SignerUpdateOne) RemoveCorrectnessReport(c ...*CorrectnessReport) *SignerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveCorrectnessReportIDs(ids...)
}

// Where appends a list predicates to the SignerUpdate builder.
func (suo *SignerUpdateOne) Where(ps ...predicate.Signer) *SignerUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SignerUpdateOne) Select(field string, fields ...string) *SignerUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Signer entity.
func (suo *SignerUpdateOne) Save(ctx context.Context) (*Signer, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SignerUpdateOne) SaveX(ctx context.Context) *Signer {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SignerUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SignerUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SignerUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := signer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Signer.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Key(); ok {
		if err := signer.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "Signer.key": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Shortkey(); ok {
		if err := signer.ShortkeyValidator(v); err != nil {
			return &ValidationError{Name: "shortkey", err: fmt.Errorf(`ent: validator failed for field "Signer.shortkey": %w`, err)}
		}
	}
	return nil
}

func (suo *SignerUpdateOne) sqlSave(ctx context.Context) (_node *Signer, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(signer.Table, signer.Columns, sqlgraph.NewFieldSpec(signer.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Signer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, signer.FieldID)
		for _, f := range fields {
			if !signer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != signer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(signer.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Evm(); ok {
		_spec.SetField(signer.FieldEvm, field.TypeString, value)
	}
	if suo.mutation.EvmCleared() {
		_spec.ClearField(signer.FieldEvm, field.TypeString)
	}
	if value, ok := suo.mutation.Key(); ok {
		_spec.SetField(signer.FieldKey, field.TypeBytes, value)
	}
	if value, ok := suo.mutation.Shortkey(); ok {
		_spec.SetField(signer.FieldShortkey, field.TypeBytes, value)
	}
	if value, ok := suo.mutation.Points(); ok {
		_spec.SetField(signer.FieldPoints, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedPoints(); ok {
		_spec.AddField(signer.FieldPoints, field.TypeInt64, value)
	}
	if suo.mutation.AssetPriceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   signer.AssetPriceTable,
			Columns: signer.AssetPricePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetprice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedAssetPriceIDs(); len(nodes) > 0 && !suo.mutation.AssetPriceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   signer.AssetPriceTable,
			Columns: signer.AssetPricePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetprice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AssetPriceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   signer.AssetPriceTable,
			Columns: signer.AssetPricePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetprice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.EventLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   signer.EventLogsTable,
			Columns: signer.EventLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedEventLogsIDs(); len(nodes) > 0 && !suo.mutation.EventLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   signer.EventLogsTable,
			Columns: signer.EventLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EventLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   signer.EventLogsTable,
			Columns: signer.EventLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.CorrectnessReportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   signer.CorrectnessReportTable,
			Columns: signer.CorrectnessReportPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(correctnessreport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedCorrectnessReportIDs(); len(nodes) > 0 && !suo.mutation.CorrectnessReportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   signer.CorrectnessReportTable,
			Columns: signer.CorrectnessReportPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(correctnessreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CorrectnessReportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   signer.CorrectnessReportTable,
			Columns: signer.CorrectnessReportPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(correctnessreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Signer{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{signer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
