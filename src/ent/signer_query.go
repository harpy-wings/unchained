// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KenshiTech/unchained/src/ent/assetprice"
	"github.com/KenshiTech/unchained/src/ent/correctnessreport"
	"github.com/KenshiTech/unchained/src/ent/eventlog"
	"github.com/KenshiTech/unchained/src/ent/predicate"
	"github.com/KenshiTech/unchained/src/ent/signer"
)

// SignerQuery is the builder for querying Signer entities.
type SignerQuery struct {
	config
	ctx                        *QueryContext
	order                      []signer.OrderOption
	inters                     []Interceptor
	predicates                 []predicate.Signer
	withAssetPrice             *AssetPriceQuery
	withEventLogs              *EventLogQuery
	withCorrectnessReport      *CorrectnessReportQuery
	modifiers                  []func(*sql.Selector)
	loadTotal                  []func(context.Context, []*Signer) error
	withNamedAssetPrice        map[string]*AssetPriceQuery
	withNamedEventLogs         map[string]*EventLogQuery
	withNamedCorrectnessReport map[string]*CorrectnessReportQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SignerQuery builder.
func (sq *SignerQuery) Where(ps ...predicate.Signer) *SignerQuery {
	sq.predicates = append(sq.predicates, ps...)
	return sq
}

// Limit the number of records to be returned by this query.
func (sq *SignerQuery) Limit(limit int) *SignerQuery {
	sq.ctx.Limit = &limit
	return sq
}

// Offset to start from.
func (sq *SignerQuery) Offset(offset int) *SignerQuery {
	sq.ctx.Offset = &offset
	return sq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sq *SignerQuery) Unique(unique bool) *SignerQuery {
	sq.ctx.Unique = &unique
	return sq
}

// Order specifies how the records should be ordered.
func (sq *SignerQuery) Order(o ...signer.OrderOption) *SignerQuery {
	sq.order = append(sq.order, o...)
	return sq
}

// QueryAssetPrice chains the current query on the "assetPrice" edge.
func (sq *SignerQuery) QueryAssetPrice() *AssetPriceQuery {
	query := (&AssetPriceClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(signer.Table, signer.FieldID, selector),
			sqlgraph.To(assetprice.Table, assetprice.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, signer.AssetPriceTable, signer.AssetPricePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEventLogs chains the current query on the "eventLogs" edge.
func (sq *SignerQuery) QueryEventLogs() *EventLogQuery {
	query := (&EventLogClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(signer.Table, signer.FieldID, selector),
			sqlgraph.To(eventlog.Table, eventlog.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, signer.EventLogsTable, signer.EventLogsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCorrectnessReport chains the current query on the "correctnessReport" edge.
func (sq *SignerQuery) QueryCorrectnessReport() *CorrectnessReportQuery {
	query := (&CorrectnessReportClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(signer.Table, signer.FieldID, selector),
			sqlgraph.To(correctnessreport.Table, correctnessreport.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, signer.CorrectnessReportTable, signer.CorrectnessReportPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Signer entity from the query.
// Returns a *NotFoundError when no Signer was found.
func (sq *SignerQuery) First(ctx context.Context) (*Signer, error) {
	nodes, err := sq.Limit(1).All(setContextOp(ctx, sq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{signer.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sq *SignerQuery) FirstX(ctx context.Context) *Signer {
	node, err := sq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Signer ID from the query.
// Returns a *NotFoundError when no Signer ID was found.
func (sq *SignerQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sq.Limit(1).IDs(setContextOp(ctx, sq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{signer.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sq *SignerQuery) FirstIDX(ctx context.Context) int {
	id, err := sq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Signer entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Signer entity is found.
// Returns a *NotFoundError when no Signer entities are found.
func (sq *SignerQuery) Only(ctx context.Context) (*Signer, error) {
	nodes, err := sq.Limit(2).All(setContextOp(ctx, sq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{signer.Label}
	default:
		return nil, &NotSingularError{signer.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sq *SignerQuery) OnlyX(ctx context.Context) *Signer {
	node, err := sq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Signer ID in the query.
// Returns a *NotSingularError when more than one Signer ID is found.
// Returns a *NotFoundError when no entities are found.
func (sq *SignerQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sq.Limit(2).IDs(setContextOp(ctx, sq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{signer.Label}
	default:
		err = &NotSingularError{signer.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sq *SignerQuery) OnlyIDX(ctx context.Context) int {
	id, err := sq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Signers.
func (sq *SignerQuery) All(ctx context.Context) ([]*Signer, error) {
	ctx = setContextOp(ctx, sq.ctx, "All")
	if err := sq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Signer, *SignerQuery]()
	return withInterceptors[[]*Signer](ctx, sq, qr, sq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sq *SignerQuery) AllX(ctx context.Context) []*Signer {
	nodes, err := sq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Signer IDs.
func (sq *SignerQuery) IDs(ctx context.Context) (ids []int, err error) {
	if sq.ctx.Unique == nil && sq.path != nil {
		sq.Unique(true)
	}
	ctx = setContextOp(ctx, sq.ctx, "IDs")
	if err = sq.Select(signer.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sq *SignerQuery) IDsX(ctx context.Context) []int {
	ids, err := sq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sq *SignerQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sq.ctx, "Count")
	if err := sq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sq, querierCount[*SignerQuery](), sq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sq *SignerQuery) CountX(ctx context.Context) int {
	count, err := sq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sq *SignerQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sq.ctx, "Exist")
	switch _, err := sq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sq *SignerQuery) ExistX(ctx context.Context) bool {
	exist, err := sq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SignerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sq *SignerQuery) Clone() *SignerQuery {
	if sq == nil {
		return nil
	}
	return &SignerQuery{
		config:                sq.config,
		ctx:                   sq.ctx.Clone(),
		order:                 append([]signer.OrderOption{}, sq.order...),
		inters:                append([]Interceptor{}, sq.inters...),
		predicates:            append([]predicate.Signer{}, sq.predicates...),
		withAssetPrice:        sq.withAssetPrice.Clone(),
		withEventLogs:         sq.withEventLogs.Clone(),
		withCorrectnessReport: sq.withCorrectnessReport.Clone(),
		// clone intermediate query.
		sql:  sq.sql.Clone(),
		path: sq.path,
	}
}

// WithAssetPrice tells the query-builder to eager-load the nodes that are connected to
// the "assetPrice" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SignerQuery) WithAssetPrice(opts ...func(*AssetPriceQuery)) *SignerQuery {
	query := (&AssetPriceClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withAssetPrice = query
	return sq
}

// WithEventLogs tells the query-builder to eager-load the nodes that are connected to
// the "eventLogs" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SignerQuery) WithEventLogs(opts ...func(*EventLogQuery)) *SignerQuery {
	query := (&EventLogClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withEventLogs = query
	return sq
}

// WithCorrectnessReport tells the query-builder to eager-load the nodes that are connected to
// the "correctnessReport" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SignerQuery) WithCorrectnessReport(opts ...func(*CorrectnessReportQuery)) *SignerQuery {
	query := (&CorrectnessReportClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withCorrectnessReport = query
	return sq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Signer.Query().
//		GroupBy(signer.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sq *SignerQuery) GroupBy(field string, fields ...string) *SignerGroupBy {
	sq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SignerGroupBy{build: sq}
	grbuild.flds = &sq.ctx.Fields
	grbuild.label = signer.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Signer.Query().
//		Select(signer.FieldName).
//		Scan(ctx, &v)
func (sq *SignerQuery) Select(fields ...string) *SignerSelect {
	sq.ctx.Fields = append(sq.ctx.Fields, fields...)
	sbuild := &SignerSelect{SignerQuery: sq}
	sbuild.label = signer.Label
	sbuild.flds, sbuild.scan = &sq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SignerSelect configured with the given aggregations.
func (sq *SignerQuery) Aggregate(fns ...AggregateFunc) *SignerSelect {
	return sq.Select().Aggregate(fns...)
}

func (sq *SignerQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sq); err != nil {
				return err
			}
		}
	}
	for _, f := range sq.ctx.Fields {
		if !signer.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sq.path != nil {
		prev, err := sq.path(ctx)
		if err != nil {
			return err
		}
		sq.sql = prev
	}
	return nil
}

func (sq *SignerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Signer, error) {
	var (
		nodes       = []*Signer{}
		_spec       = sq.querySpec()
		loadedTypes = [3]bool{
			sq.withAssetPrice != nil,
			sq.withEventLogs != nil,
			sq.withCorrectnessReport != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Signer).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Signer{config: sq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sq.withAssetPrice; query != nil {
		if err := sq.loadAssetPrice(ctx, query, nodes,
			func(n *Signer) { n.Edges.AssetPrice = []*AssetPrice{} },
			func(n *Signer, e *AssetPrice) { n.Edges.AssetPrice = append(n.Edges.AssetPrice, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withEventLogs; query != nil {
		if err := sq.loadEventLogs(ctx, query, nodes,
			func(n *Signer) { n.Edges.EventLogs = []*EventLog{} },
			func(n *Signer, e *EventLog) { n.Edges.EventLogs = append(n.Edges.EventLogs, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withCorrectnessReport; query != nil {
		if err := sq.loadCorrectnessReport(ctx, query, nodes,
			func(n *Signer) { n.Edges.CorrectnessReport = []*CorrectnessReport{} },
			func(n *Signer, e *CorrectnessReport) {
				n.Edges.CorrectnessReport = append(n.Edges.CorrectnessReport, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedAssetPrice {
		if err := sq.loadAssetPrice(ctx, query, nodes,
			func(n *Signer) { n.appendNamedAssetPrice(name) },
			func(n *Signer, e *AssetPrice) { n.appendNamedAssetPrice(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedEventLogs {
		if err := sq.loadEventLogs(ctx, query, nodes,
			func(n *Signer) { n.appendNamedEventLogs(name) },
			func(n *Signer, e *EventLog) { n.appendNamedEventLogs(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedCorrectnessReport {
		if err := sq.loadCorrectnessReport(ctx, query, nodes,
			func(n *Signer) { n.appendNamedCorrectnessReport(name) },
			func(n *Signer, e *CorrectnessReport) { n.appendNamedCorrectnessReport(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range sq.loadTotal {
		if err := sq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sq *SignerQuery) loadAssetPrice(ctx context.Context, query *AssetPriceQuery, nodes []*Signer, init func(*Signer), assign func(*Signer, *AssetPrice)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Signer)
	nids := make(map[int]map[*Signer]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(signer.AssetPriceTable)
		s.Join(joinT).On(s.C(assetprice.FieldID), joinT.C(signer.AssetPricePrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(signer.AssetPricePrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(signer.AssetPricePrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Signer]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*AssetPrice](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "assetPrice" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (sq *SignerQuery) loadEventLogs(ctx context.Context, query *EventLogQuery, nodes []*Signer, init func(*Signer), assign func(*Signer, *EventLog)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Signer)
	nids := make(map[int]map[*Signer]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(signer.EventLogsTable)
		s.Join(joinT).On(s.C(eventlog.FieldID), joinT.C(signer.EventLogsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(signer.EventLogsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(signer.EventLogsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Signer]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*EventLog](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "eventLogs" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (sq *SignerQuery) loadCorrectnessReport(ctx context.Context, query *CorrectnessReportQuery, nodes []*Signer, init func(*Signer), assign func(*Signer, *CorrectnessReport)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Signer)
	nids := make(map[int]map[*Signer]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(signer.CorrectnessReportTable)
		s.Join(joinT).On(s.C(correctnessreport.FieldID), joinT.C(signer.CorrectnessReportPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(signer.CorrectnessReportPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(signer.CorrectnessReportPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Signer]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*CorrectnessReport](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "correctnessReport" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (sq *SignerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sq.querySpec()
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	_spec.Node.Columns = sq.ctx.Fields
	if len(sq.ctx.Fields) > 0 {
		_spec.Unique = sq.ctx.Unique != nil && *sq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sq.driver, _spec)
}

func (sq *SignerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(signer.Table, signer.Columns, sqlgraph.NewFieldSpec(signer.FieldID, field.TypeInt))
	_spec.From = sq.sql
	if unique := sq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sq.path != nil {
		_spec.Unique = true
	}
	if fields := sq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, signer.FieldID)
		for i := range fields {
			if fields[i] != signer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sq *SignerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sq.driver.Dialect())
	t1 := builder.Table(signer.Table)
	columns := sq.ctx.Fields
	if len(columns) == 0 {
		columns = signer.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sq.sql != nil {
		selector = sq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sq.ctx.Unique != nil && *sq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range sq.predicates {
		p(selector)
	}
	for _, p := range sq.order {
		p(selector)
	}
	if offset := sq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedAssetPrice tells the query-builder to eager-load the nodes that are connected to the "assetPrice"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *SignerQuery) WithNamedAssetPrice(name string, opts ...func(*AssetPriceQuery)) *SignerQuery {
	query := (&AssetPriceClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedAssetPrice == nil {
		sq.withNamedAssetPrice = make(map[string]*AssetPriceQuery)
	}
	sq.withNamedAssetPrice[name] = query
	return sq
}

// WithNamedEventLogs tells the query-builder to eager-load the nodes that are connected to the "eventLogs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *SignerQuery) WithNamedEventLogs(name string, opts ...func(*EventLogQuery)) *SignerQuery {
	query := (&EventLogClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedEventLogs == nil {
		sq.withNamedEventLogs = make(map[string]*EventLogQuery)
	}
	sq.withNamedEventLogs[name] = query
	return sq
}

// WithNamedCorrectnessReport tells the query-builder to eager-load the nodes that are connected to the "correctnessReport"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *SignerQuery) WithNamedCorrectnessReport(name string, opts ...func(*CorrectnessReportQuery)) *SignerQuery {
	query := (&CorrectnessReportClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedCorrectnessReport == nil {
		sq.withNamedCorrectnessReport = make(map[string]*CorrectnessReportQuery)
	}
	sq.withNamedCorrectnessReport[name] = query
	return sq
}

// SignerGroupBy is the group-by builder for Signer entities.
type SignerGroupBy struct {
	selector
	build *SignerQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sgb *SignerGroupBy) Aggregate(fns ...AggregateFunc) *SignerGroupBy {
	sgb.fns = append(sgb.fns, fns...)
	return sgb
}

// Scan applies the selector query and scans the result into the given value.
func (sgb *SignerGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sgb.build.ctx, "GroupBy")
	if err := sgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SignerQuery, *SignerGroupBy](ctx, sgb.build, sgb, sgb.build.inters, v)
}

func (sgb *SignerGroupBy) sqlScan(ctx context.Context, root *SignerQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sgb.fns))
	for _, fn := range sgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sgb.flds)+len(sgb.fns))
		for _, f := range *sgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SignerSelect is the builder for selecting fields of Signer entities.
type SignerSelect struct {
	*SignerQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ss *SignerSelect) Aggregate(fns ...AggregateFunc) *SignerSelect {
	ss.fns = append(ss.fns, fns...)
	return ss
}

// Scan applies the selector query and scans the result into the given value.
func (ss *SignerSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ss.ctx, "Select")
	if err := ss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SignerQuery, *SignerSelect](ctx, ss.SignerQuery, ss, ss.inters, v)
}

func (ss *SignerSelect) sqlScan(ctx context.Context, root *SignerQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ss.fns))
	for _, fn := range ss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
