directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type AssetPrice implements Node {
  id: ID!
  block: Uint!
  signerscount: Uint @goField(name: "SignersCount", forceResolver: false)
  price: Uint!
  signature: Bytes!
  asset: String
  chain: String
  pair: String
  signers: [Signer!]!
}
"""
A connection to a list of items.
"""
type AssetPriceConnection {
  """
  A list of edges.
  """
  edges: [AssetPriceEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type AssetPriceEdge {
  """
  The item at the end of the edge.
  """
  node: AssetPrice
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for AssetPrice connections
"""
input AssetPriceOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order AssetPrices.
  """
  field: AssetPriceOrderField!
}
"""
Properties by which AssetPrice connections can be ordered.
"""
enum AssetPriceOrderField {
  BLOCK
}
"""
AssetPriceWhereInput is used for filtering AssetPrice objects.
Input was generated by ent.
"""
input AssetPriceWhereInput {
  not: AssetPriceWhereInput
  and: [AssetPriceWhereInput!]
  or: [AssetPriceWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  block field predicates
  """
  block: Uint
  blockNEQ: Uint
  blockIn: [Uint!]
  blockNotIn: [Uint!]
  blockGT: Uint
  blockGTE: Uint
  blockLT: Uint
  blockLTE: Uint
  """
  signersCount field predicates
  """
  signerscount: Uint
  signerscountNEQ: Uint
  signerscountIn: [Uint!]
  signerscountNotIn: [Uint!]
  signerscountGT: Uint
  signerscountGTE: Uint
  signerscountLT: Uint
  signerscountLTE: Uint
  signerscountIsNil: Boolean
  signerscountNotNil: Boolean
  """
  price field predicates
  """
  price: Uint
  priceNEQ: Uint
  priceIn: [Uint!]
  priceNotIn: [Uint!]
  priceGT: Uint
  priceGTE: Uint
  priceLT: Uint
  priceLTE: Uint
  """
  asset field predicates
  """
  asset: String
  assetNEQ: String
  assetIn: [String!]
  assetNotIn: [String!]
  assetGT: String
  assetGTE: String
  assetLT: String
  assetLTE: String
  assetContains: String
  assetHasPrefix: String
  assetHasSuffix: String
  assetIsNil: Boolean
  assetNotNil: Boolean
  assetEqualFold: String
  assetContainsFold: String
  """
  chain field predicates
  """
  chain: String
  chainNEQ: String
  chainIn: [String!]
  chainNotIn: [String!]
  chainGT: String
  chainGTE: String
  chainLT: String
  chainLTE: String
  chainContains: String
  chainHasPrefix: String
  chainHasSuffix: String
  chainIsNil: Boolean
  chainNotNil: Boolean
  chainEqualFold: String
  chainContainsFold: String
  """
  pair field predicates
  """
  pair: String
  pairNEQ: String
  pairIn: [String!]
  pairNotIn: [String!]
  pairGT: String
  pairGTE: String
  pairLT: String
  pairLTE: String
  pairContains: String
  pairHasPrefix: String
  pairHasSuffix: String
  pairIsNil: Boolean
  pairNotNil: Boolean
  pairEqualFold: String
  pairContainsFold: String
  """
  signers edge predicates
  """
  hasSigners: Boolean
  hasSignersWith: [SignerWhereInput!]
}
type CorrectnessReport implements Node {
  id: ID!
  signerscount: Uint! @goField(name: "SignersCount", forceResolver: false)
  timestamp: Uint!
  signature: Bytes!
  hash: Bytes!
  topic: Bytes!
  correct: Boolean!
  signers: [Signer!]!
}
"""
A connection to a list of items.
"""
type CorrectnessReportConnection {
  """
  A list of edges.
  """
  edges: [CorrectnessReportEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CorrectnessReportEdge {
  """
  The item at the end of the edge.
  """
  node: CorrectnessReport
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for CorrectnessReport connections
"""
input CorrectnessReportOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order CorrectnessReports.
  """
  field: CorrectnessReportOrderField!
}
"""
Properties by which CorrectnessReport connections can be ordered.
"""
enum CorrectnessReportOrderField {
  TIMESTAMP
}
"""
CorrectnessReportWhereInput is used for filtering CorrectnessReport objects.
Input was generated by ent.
"""
input CorrectnessReportWhereInput {
  not: CorrectnessReportWhereInput
  and: [CorrectnessReportWhereInput!]
  or: [CorrectnessReportWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  signersCount field predicates
  """
  signerscount: Uint
  signerscountNEQ: Uint
  signerscountIn: [Uint!]
  signerscountNotIn: [Uint!]
  signerscountGT: Uint
  signerscountGTE: Uint
  signerscountLT: Uint
  signerscountLTE: Uint
  """
  timestamp field predicates
  """
  timestamp: Uint
  timestampNEQ: Uint
  timestampIn: [Uint!]
  timestampNotIn: [Uint!]
  timestampGT: Uint
  timestampGTE: Uint
  timestampLT: Uint
  timestampLTE: Uint
  """
  correct field predicates
  """
  correct: Boolean
  correctNEQ: Boolean
  """
  signers edge predicates
  """
  hasSigners: Boolean
  hasSignersWith: [SignerWhereInput!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type EventLog implements Node {
  id: ID!
  block: Uint!
  signerscount: Uint! @goField(name: "SignersCount", forceResolver: false)
  signature: Bytes!
  address: String!
  chain: String!
  index: Uint!
  event: String!
  transaction: Bytes!
  args: [EventLogArg!]!
  signers: [Signer!]!
}
"""
A connection to a list of items.
"""
type EventLogConnection {
  """
  A list of edges.
  """
  edges: [EventLogEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type EventLogEdge {
  """
  The item at the end of the edge.
  """
  node: EventLog
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for EventLog connections
"""
input EventLogOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order EventLogs.
  """
  field: EventLogOrderField!
}
"""
Properties by which EventLog connections can be ordered.
"""
enum EventLogOrderField {
  BLOCK
}
"""
EventLogWhereInput is used for filtering EventLog objects.
Input was generated by ent.
"""
input EventLogWhereInput {
  not: EventLogWhereInput
  and: [EventLogWhereInput!]
  or: [EventLogWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  block field predicates
  """
  block: Uint
  blockNEQ: Uint
  blockIn: [Uint!]
  blockNotIn: [Uint!]
  blockGT: Uint
  blockGTE: Uint
  blockLT: Uint
  blockLTE: Uint
  """
  signersCount field predicates
  """
  signerscount: Uint
  signerscountNEQ: Uint
  signerscountIn: [Uint!]
  signerscountNotIn: [Uint!]
  signerscountGT: Uint
  signerscountGTE: Uint
  signerscountLT: Uint
  signerscountLTE: Uint
  """
  address field predicates
  """
  address: String
  addressNEQ: String
  addressIn: [String!]
  addressNotIn: [String!]
  addressGT: String
  addressGTE: String
  addressLT: String
  addressLTE: String
  addressContains: String
  addressHasPrefix: String
  addressHasSuffix: String
  addressEqualFold: String
  addressContainsFold: String
  """
  chain field predicates
  """
  chain: String
  chainNEQ: String
  chainIn: [String!]
  chainNotIn: [String!]
  chainGT: String
  chainGTE: String
  chainLT: String
  chainLTE: String
  chainContains: String
  chainHasPrefix: String
  chainHasSuffix: String
  chainEqualFold: String
  chainContainsFold: String
  """
  index field predicates
  """
  index: Uint
  indexNEQ: Uint
  indexIn: [Uint!]
  indexNotIn: [Uint!]
  indexGT: Uint
  indexGTE: Uint
  indexLT: Uint
  indexLTE: Uint
  """
  event field predicates
  """
  event: String
  eventNEQ: String
  eventIn: [String!]
  eventNotIn: [String!]
  eventGT: String
  eventGTE: String
  eventLT: String
  eventLTE: String
  eventContains: String
  eventHasPrefix: String
  eventHasSuffix: String
  eventEqualFold: String
  eventContainsFold: String
  """
  signers edge predicates
  """
  hasSigners: Boolean
  hasSignersWith: [SignerWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/KenshiTech/unchained/src/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  assetPrices(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for AssetPrices returned from the connection.
    """
    orderBy: AssetPriceOrder

    """
    Filtering options for AssetPrices returned from the connection.
    """
    where: AssetPriceWhereInput
  ): AssetPriceConnection!
  correctnessReports(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for CorrectnessReports returned from the connection.
    """
    orderBy: CorrectnessReportOrder

    """
    Filtering options for CorrectnessReports returned from the connection.
    """
    where: CorrectnessReportWhereInput
  ): CorrectnessReportConnection!
  eventLogs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for EventLogs returned from the connection.
    """
    orderBy: EventLogOrder

    """
    Filtering options for EventLogs returned from the connection.
    """
    where: EventLogWhereInput
  ): EventLogConnection!
  signers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Signers returned from the connection.
    """
    orderBy: SignerOrder

    """
    Filtering options for Signers returned from the connection.
    """
    where: SignerWhereInput
  ): SignerConnection!
}
type Signer implements Node {
  id: ID!
  name: String!
  evm: String
  key: Bytes!
  shortkey: Bytes!
  points: Int!
  assetprice: [AssetPrice!] @goField(name: "AssetPrice", forceResolver: false)
  eventlogs: [EventLog!] @goField(name: "EventLogs", forceResolver: false)
  correctnessreport: [CorrectnessReport!] @goField(name: "CorrectnessReport", forceResolver: false)
}
"""
A connection to a list of items.
"""
type SignerConnection {
  """
  A list of edges.
  """
  edges: [SignerEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type SignerEdge {
  """
  The item at the end of the edge.
  """
  node: Signer
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Signer connections
"""
input SignerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Signers.
  """
  field: SignerOrderField!
}
"""
Properties by which Signer connections can be ordered.
"""
enum SignerOrderField {
  POINTS
}
"""
SignerWhereInput is used for filtering Signer objects.
Input was generated by ent.
"""
input SignerWhereInput {
  not: SignerWhereInput
  and: [SignerWhereInput!]
  or: [SignerWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  evm field predicates
  """
  evm: String
  evmNEQ: String
  evmIn: [String!]
  evmNotIn: [String!]
  evmGT: String
  evmGTE: String
  evmLT: String
  evmLTE: String
  evmContains: String
  evmHasPrefix: String
  evmHasSuffix: String
  evmIsNil: Boolean
  evmNotNil: Boolean
  evmEqualFold: String
  evmContainsFold: String
  """
  points field predicates
  """
  points: Int
  pointsNEQ: Int
  pointsIn: [Int!]
  pointsNotIn: [Int!]
  pointsGT: Int
  pointsGTE: Int
  pointsLT: Int
  pointsLTE: Int
  """
  assetPrice edge predicates
  """
  hasAssetPrice: Boolean
  hasAssetPriceWith: [AssetPriceWhereInput!]
  """
  eventLogs edge predicates
  """
  hasEventLogs: Boolean
  hasEventLogsWith: [EventLogWhereInput!]
  """
  correctnessReport edge predicates
  """
  hasCorrectnessReport: Boolean
  hasCorrectnessReportWith: [CorrectnessReportWhereInput!]
}
"""
The builtin Uint type
"""
scalar Uint
